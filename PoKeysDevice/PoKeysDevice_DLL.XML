<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PoKeysDevice_DLL</name>
    </assembly>
    <members>
        <member name="T:PoKeysDevice_DLL.ePoKeysPEState">
            <summary>
            State of the PE
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peSTOPPED">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peINTERNAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peBUFFER">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peRUNNING">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peJOGGING">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peSTOPPING">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peHOME">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peHOMING">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.pePROBECOMPLETE">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.pePROBE">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.pePROBEERROR">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peSTOP_LIMIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peSTOP_EMERGENCY">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peSTOP_BUFFER_UNDERFLOW">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEState.peSTOP_NOT_READY">
            <summary>
            
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePoKeysPEAxisState">
            <summary>
            Pulse engine axis state
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axSTOPPED">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axREADY">
            <summary>
            Axis is ready
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axRUNNING">
            <summary>
            Axis is ready and running
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axBUFFER">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axHOMING_RESETTING">
            <summary>
            Axis has been homed
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axHOMING_BACKING_OFF">
            <summary>
            Axis has been homed
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axHOME">
            <summary>
            Axis has been homed
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axHOMINGSTART">
            <summary>
            Starting homing procedure at the selected axis
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axHOMINGSEARCH">
            <summary>
            Searching for home switch
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axHOMINGBACK">
            <summary>
            Releasing the home switch
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axPROBED">
            <summary>
            Axis has finished probing
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axPROBESTART">
            <summary>
            Probing has been commanded on this axis
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axPROBESEARCH">
            <summary>
            Searching for probing point...
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axERROR">
            <summary>
            Error occured
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysPEAxisState.axLIMIT">
            <summary>
            Limit tripped
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.s3DPoint">
            <summary>
            Integer type 3-D point structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.s3DPoint.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.s3DPoint.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.s3DPoint.z">
            <summary>
            z
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.s3DPoint.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create new 3-D point
            </summary>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="nz"></param>
        </member>
        <member name="T:PoKeysDevice_DLL.s3DPointf">
            <summary>
            Floating point type 3-D point structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.s3DPointf.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.s3DPointf.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.s3DPointf.z">
            <summary>
            z
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePEv2_AxisConfig">
            <summary>
            Pulse engine v2 axis configuration flags
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisConfig.aoENABLED">
            <summary>
            Axis enabled
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisConfig.aoINVERTED">
            <summary>
            Axis inverted
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisConfig.aoINTERNAL_PLANNER">
            <summary>
            Axis uses internal motion planner
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisConfig.aoPOSITION_MODE">
            <summary>
            Internal motion planner for this axis is in position mode
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisConfig.aoINVERTED_HOME">
            <summary>
            Axis homing direction is inverted
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisConfig.aoSOFT_LIMIT_ENABLED">
            <summary>
            Use soft-limits for this axis
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions">
            <summary>
            Pulse engine v2 axis switch configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions.aoSWITCH_LIMIT_N">
            <summary>
            Limit- switch is present
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions.aoSWITCH_LIMIT_P">
            <summary>
            Limit+ switch is present
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions.aoSWITCH_HOME">
            <summary>
            Home switch is present
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions.aoSWITCH_COMBINED_LN_H">
            <summary>
            Home switch is shared with Limit- switch
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions.aoSWITCH_COMBINED_LP_H">
            <summary>
            Home switch is shared with Limit+ switch
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions.aoSWITCH_INVERT_LIMIT_N">
            <summary>
            Invert limit- switch polarity
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions.aoSWITCH_INVERT_LIMIT_P">
            <summary>
            Invert limit+ switch polarity
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePEv2_AxisSwitchOptions.aoSWITCH_INVERT_HOME">
            <summary>
            Invert home switch polarity
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.info">
            <summary>
            Pulse engine info
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.axisState">
            <summary>
            Axis states (bit-mapped) - see ePoKeysPEAxisState
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.AxesConfig">
            <summary>
            Axis configuration - see ePEv2_AxisConfig
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.AxesSwitchConfig">
            <summary>
            Axis switch configuration - see ePEv2_AxisSwitchOptions
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.CurrentPosition">
            <summary>
            Current position
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PositionSetup">
            <summary>
            Position to be set as current position
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ReferencePositionSpeed">
            <summary>
            Reference position or speed
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.SoftLimitMaximum">
            <summary>
            Soft limit maximum position
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.SoftLimitMinimum">
            <summary>
            Soft limit minimum position
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.HomingSpeed">
            <summary>
            Homing speed per axis (in %)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.HomingReturnSpeed">
            <summary>
            Homing return speed per axis (in % of the homing speed)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.HomeOffsets">
            <summary>
            Home position offset
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ProbePosition">
            <summary>
            Position where probe detected change
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ProbeMaxPosition">
            <summary>
            Maximum position to travel to until stopping and returning error
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.MaxSpeed">
            <summary>
            Maximum axis speed (in pulses per ms)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.MaxAcceleration">
            <summary>
            Maximum axis acceleration (in pulses/ms/ms)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.MaxDecceleration">
            <summary>
            Maximum axis deceleration (in pulses/ms/ms)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.MPGjogMultiplier">
            <summary>
            MPG jog multiplier value
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.MPGjogEncoder">
            <summary>
            MPG jog encoder ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.MPGjogDivider">
            <summary>
            MPG jog division factor to increase encoder resolution
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PinHomeSwitch">
            <summary>
            Home switch pin (0 for external dedicated input)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PinLimitMSwitch">
            <summary>
            Limit- switch pin (0 for external dedicated input)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PinLimitPSwitch">
            <summary>
            Limit+ switch pin (0 for external dedicated input)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.AxisEnableOutputPins">
            <summary>
            Axis enabled output pin (0 for external dedicated output)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.MotionBuffer">
            <summary>
            Motion buffer entries
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.backlashSettings">
            <summary>
            Backlash compensation settings for each axis
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PulseEngineEnabled">
            <summary>
            Pulse engine enabled status, also number of enabled axes
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PulseGeneratorType">
            <summary>
            Pulse engine generator type (0: external, 1: internal 3ch)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ChargePumpEnabled">
            <summary>
            Charge pump output enabled
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.EmergencySwitchPolarity">
            <summary>
            Emergency switch polarity (set to 1 to invert)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PulseEngineActivated">
            <summary>
            Pulse engine activation status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.LimitStatusP">
            <summary>
            Limit+ status (bit-mapped)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.LimitStatusN">
            <summary>
            Limit- status (bit-mapped)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.HomeStatus">
            <summary>
            Home status (bit-mapped)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ErrorInputStatus">
            <summary>
            Stepper motor driver error inputs status (bit-mapped)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.MiscInputStatus">
            <summary>
            Miscelenous digital inputs...
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.LimitOverride">
            <summary>
            Limit override status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.LimitOverrideSetup">
            <summary>
            Limit override configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PulseEngineState">
            <summary>
            State of pulse engine - see ePoKeysPEState
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.BacklashCompensationEnabled">
            <summary>
            Backlash compensation enable switch
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.EmergencySwitchPin">
            <summary>
            Emergency switch input pin selection (on supported devices)
            0 - disabled
            1 - default input
            10+ 10-based pin ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.AxisEnabledInvertMask">
            <summary>
            Axis enabled signals inversion option (0/1)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ProbeSpeed">
            <summary>
            Probe speed (ratio of the maximum speed)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.AxisEnabledStatesMask">
            <summary>
            Bit-mapped states, where axis enabled and charge pump signals are active
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ExternalRelayOutputs">
            <summary>
            External relay outputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ExternalOCOutputs">
            <summary>
            External open-collector outputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PulseEngineBufferSize">
            <summary>
            Buffer size information...
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.PulseEngineStateSetup">
            <summary>
            Pulse engine new state configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.param1">
            <summary>
            Parameter 1 value
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.HomingStartMaskSetup">
            <summary>
            Bit-mapped axes indexes to be homed
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.SoftLimitStatus">
            <summary>
            Bit-mapped soft-limit statuses per axes
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ProbeStartMaskSetup">
            <summary>
            Bit-mapped axis indexes for probing
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ProbeInput">
            <summary>
            Probe input (0:disabled, 1-8:external inputs, 9+ Pin ID-9)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ProbeInputPolarity">
            <summary>
            Probe input polarity
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.ProbeStatus">
            <summary>
            Probe status (probe completion bit-mapped status)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.FilterHomeSwitch">
            <summary>
            Home switch filter setting (0-254)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.FilterLimitMSwitch">
            <summary>
            Limit- switch filter setting (0-254)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.FilterLimitPSwitch">
            <summary>
            Limit+ switch filter setting (0-254)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.HomeAlgorithmSelection">
            <summary>
            Homing algorithm selection
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPEv2.HomeBackOffConfig">
            <summary>
            Home back-off distance configuration
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeys_PoStepDriversConfig">
            <summary>
            PoStep driver configuration
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeys_smartPEconfig">
            <summary>
            Smart Pulse engine generator configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEconfig.pulseWidth">
            <summary>
            Pulse width in 1/16 us
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEconfig.spindlePWMperiod">
            <summary>
            Spindle PWM period
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEconfig.pulseMultiplication">
            <summary>
            Pulse multiplication factor
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEconfig.tickMultiplication">
            <summary>
            Encoder tick multiplication factor
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEconfig.maxDismatchValue">
            <summary>
            Max. dismatch value between pulses and encoder
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeys_smartPEstatus">
            <summary>
            Smart Pulse engine generator status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEstatus.curPosition">
            <summary>
            Current axis position
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEstatus.curEncoderPosition">
            <summary>
            Current encoder position
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEstatus.curDismatchValue">
            <summary>
            Current dismatch value between pulses and encoder
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEstatus.spindlePeriod">
            <summary>
            Spindle period
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEstatus.axisDismatchStatus">
            <summary>
            Axis dismatch status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPEstatus.inputStatus">
            <summary>
            Other inputs
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeys_smartPE">
            <summary>
            Smart Pulse generator structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPE.config">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeys_smartPE.status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.PoKeysDevice">
            <summary>
            Main class definition. Use this class for communication with PoKeys devices</summary>
        </member>
        <member name="T:PoKeysDevice_DLL.IPoKeysDevice">
            <summary>
            Main PoKeysDevice interface
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.IPoKeysDevice.GetAnalogValueMax">
            <summary>
            Returns the maximum value of analog input
            </summary>
            <returns>1024 for 10-bit inputs or 4096 for 12-bit inputs</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WS2812_SendLEDdata(System.UInt32[],System.Int32,System.UInt16,System.Byte)">
            <summary>
            
            </summary>
            <param name="LEDdata">32-bit LED data array - RGBW</param>
            <param name="LEDoffset">Offset in the provided LEDdata array</param>
            <param name="startLED">LED ID of the first data to send</param>
            <param name="LEDcount">Number of LEDs</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WS2812_SendLEDdata(System.UInt32[],System.UInt16)">
            <summary>
            Send the complete array of LED data to the device
            </summary>
            <param name="LEDdata"></param>
            <param name="startLED"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_GetStatus(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_GetStatus(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_SetStatus(System.Byte)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_SetStatuswCP(System.Byte,System.Byte)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_SetStatus(System.Byte)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_SetStatuswCP(System.Byte,System.Byte)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_SetCurrentPosition(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_SetCurrentPosition(PoKeysDevice_DLL.s3DPoint@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_GetAxesConfiguration(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_GetAxesConfiguration(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_SetAxesConfiguration(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_SetAxesConfiguration(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_GetKeyboardConfiguration(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_GetKeyboardConfiguration(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_SetKeyboardConfiguration(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_SetKeyboardConfiguration(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_SetState(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_SetState(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_StartHoming(System.Byte,System.Byte,System.Byte)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_StartHoming(System.Byte,System.Byte,System.Byte)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_GetParameters(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_GetParameters(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_SetParameters(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_SetParameters(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_Move(System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_Move(PoKeysDevice_DLL.s3DPoint@,System.Byte)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_GetInfo(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_GetInfo(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_FillBuffer(System.IntPtr,System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_FillBuffer(PoKeysDevice_DLL.sPoKeysPE@,PoKeysDevice_DLL.sPoKeysPEbuffer55@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_FillBufferBurst(PoKeysDevice_DLL.sPoKeysPE@,PoKeysDevice_DLL.sPoKeysPEbuffer55@,PoKeysDevice_DLL.sPoKeysPEbuffer55@,PoKeysDevice_DLL.sPoKeysPEbuffer55@,PoKeysDevice_DLL.sPoKeysPEbuffer55@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_ClearBuffer">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_StartDebug">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_ClearBuffer">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PE_GetFreeBufferSize(System.IntPtr)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_GetFreeBufferSize(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_GetMPGjogStatus(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PE_SetMPGjogStatus(PoKeysDevice_DLL.sPoKeysPE@)">
            <summary>
            Not supported since FW version 3.0.66
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.CheckSupport(PoKeysDevice_DLL.ePoKeysDeviceSupport)">
            <summary>
            Checks if device supports requested item
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.IsValidIPAddr(System.String)">
            <summary>
              Internal function to check for IP address validity
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetNetworkDeviceIPAddressWithBroadcast(System.UInt32,System.Byte[],System.Byte)">
            <summary>
            This function enables to set the device configuration without direct TCP IP connection to the device.
            It uses UDP broadcast to deliver message to the device on port 20055.
            </summary>
            <param name="deviceSerialNumber">Serial number of the device being searched for</param>
            <param name="ip_addr">New IP address (4 bytes)</param>
            <param name="useDHCP">Set to true to enable DHCP on the device</param>
            <returns>True if message was sent (without waiting for the confirmation)</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetNetworkDeviceIPAddressWithBroadcast(System.UInt32,System.String,System.Byte)">
            <summary>
            This function enables to set the device configuration without direct TCP IP connection to the device.
            It uses UDP broadcast to deliver message to the device on port 20055.
            </summary>
            <param name="deviceSerialNumber">Serial number of the device being searched for</param>
            <param name="ip_address">New IP address string</param>
            <param name="useDHCP">Set to true to enable DHCP on the device</param>
            <returns>True if message was sent (without waiting for the confirmation)</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.StartEthernetDiscovery(System.Int32,System.Boolean)">
            <summary>
              Start automatic network device discovery
            </summary>
            <example>The following example enumerates network devices and lists them in the listbox:
            <code>
            // Enumerate and list etherent devices
            MyDevice.StartEthernetDiscovery();
            byte userID = 0;
            
            lstEthDevices.Items.Clear();
            lstEthDevices.Items.Add("Searching....");
            lstEthDevices.Enabled = false;
            lstEthDevices.Refresh();
            Application.DoEvents();
            Thread.Sleep(2000);
            
            MyDevice.StopEthernetDiscovery();
            
            if (MyDevice.GetNumberOfDetectedNetworkDevices() > 0)
            {
                lstEthDevices.Enabled = true;
                lstEthDevices.Items.Clear();
                cmdEthConnect.Enabled = true;
            }
            else
            {
                lstEthDevices.Items.Clear();
                lstEthDevices.Items.Add("No device detected");
                cmdEthConnect.Enabled = false;
            }
            for (int k = 0; k &lt; MyDevice.GetNumberOfDetectedNetworkDevices(); k++)
            {
                MyDevice.ConnectToNetworkDevice(MyDevice.EthDeviceIP[k]);
            
                MyDevice.GetUserID(ref userID);
                lstEthDevices.Items.Add(MyDevice.GetDeviceTypeName() + " (" + userID + ")");
            
                MyDevice.DisconnectDevice();
            }
            </code>
            </example>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.StopEthernetDiscovery">
            <summary>
              Stop automatic network device discovery
            </summary>
            <example>The following example enumerates network devices and lists them in the listbox:
            <code>
            // Enumerate and list etherent devices
            MyDevice.StartEthernetDiscovery();
            byte userID = 0;
            
            lstEthDevices.Items.Clear();
            lstEthDevices.Items.Add("Searching....");
            lstEthDevices.Enabled = false;
            lstEthDevices.Refresh();
            Application.DoEvents();
            Thread.Sleep(2000);
            
            MyDevice.StopEthernetDiscovery();
            
            if (MyDevice.GetNumberOfDetectedNetworkDevices() > 0)
            {
                lstEthDevices.Enabled = true;
                lstEthDevices.Items.Clear();
                cmdEthConnect.Enabled = true;
            }
            else
            {
                lstEthDevices.Items.Clear();
                lstEthDevices.Items.Add("No device detected");
                cmdEthConnect.Enabled = false;
            }
            for (int k = 0; k &lt; MyDevice.GetNumberOfDetectedNetworkDevices(); k++)
            {
                MyDevice.ConnectToNetworkDevice(MyDevice.EthDeviceIP[k]);
            
                MyDevice.GetUserID(ref userID);
                lstEthDevices.Items.Add(MyDevice.GetDeviceTypeName() + " (" + userID + ")");
            
                MyDevice.DisconnectDevice();
            }
            </code>
            </example>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ListEthernetDevices">
            <summary>
              Internal function (thread) to check for discovery reponses
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.isEthernetDiscoveryInProgress">
            <summary>
            Checks whether ethernet device discovery is in progress.
            </summary>
            <returns>True if discovery still in progress</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNumberOfDetectedNetworkDevices">
            <summary>
              Returns the number of detected network devices
            </summary>
            <returns>Number of detected network devices</returns>
            <example>The following example enumerates network devices and lists them in the listbox:
            <code>
            // Enumerate and list etherent devices
            MyDevice.StartEthernetDiscovery();
            byte userID = 0;
            
            lstEthDevices.Items.Clear();
            lstEthDevices.Items.Add("Searching....");
            lstEthDevices.Enabled = false;
            lstEthDevices.Refresh();
            Application.DoEvents();
            Thread.Sleep(2000);
            
            MyDevice.StopEthernetDiscovery();
            
            if (MyDevice.GetNumberOfDetectedNetworkDevices() > 0)
            {
                lstEthDevices.Enabled = true;
                lstEthDevices.Items.Clear();
            }
            else
            {
                lstEthDevices.Items.Clear();
                lstEthDevices.Items.Add("No device detected");
            }
            for (int k = 0; k &lt; MyDevice.GetNumberOfDetectedNetworkDevices(); k++)
            {
                MyDevice.ConnectToNetworkDevice(MyDevice.EthDeviceIP[k]);
            
                MyDevice.GetUserID(ref userID);
                lstEthDevices.Items.Add(MyDevice.GetDeviceTypeName() + " (" + userID + ")");
            
                MyDevice.DisconnectDevice();
            }
            </code>
            </example>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkDevicesAddressses">
            <summary>
              Returns the IP addresses of detected network devices
            </summary>
            <returns>List of IP addresses</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkDevicesHostIP">
            <summary>
            Returns the IP addresses of the host that sent the discovery request
            </summary>
            <returns>List of IP addresses</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkDevicesDHCPstatus">
            <summary>
            Returns DHCP statuses of detected network devices
            </summary>
            <returns>List of DHCP statuses</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkDeviceSerialNumbers">
            <summary>
            Returns serial numbers of detected network devices
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkDeviceAddress(System.Int32)">
            <summary>
            Returns the network address of the device with the specified index
            </summary>
            <param name="deviceIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkDeviceHostIP(System.Int32)">
            <summary>
            Returns the host IP for the specified device
            </summary>
            <param name="deviceIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ConnectToNetworkDevice_Probe(System.String)">
            <summary>
            Start a connection probe - initiates a TCP connection with the device
            </summary>
            <param name="address">IP address of the device</param>
            <returns>True if connection request was sent</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetConnectionProbeCompleteStatus">
            <summary>
            Get the connection probe completion status.
            </summary>
            <returns>True if connection attempt completed (whether successfully or unsuccessfully)</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetConnectionProbeStatus">
            <summary>
            Get the connection probe status
            </summary>
            <returns>True if connection with the device was successfully established</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ConnectToNetworkDevice(System.String)">
            <summary>
              Opens the connection to the network device with a specific IP address. When port is different than default, use the format IP:Port
            </summary>
            <param name="address">IP address of the device</param>
            <returns>True if connection with the device was successfully established</returns>
            <example>The following example enumerates network devices and lists them in the listbox:
            <code>
            // Enumerate and list etherent devices
            MyDevice.StartEthernetDiscovery();
            byte userID = 0;
            
            lstEthDevices.Items.Clear();
            lstEthDevices.Items.Add("Searching....");
            lstEthDevices.Enabled = false;
            lstEthDevices.Refresh();
            Application.DoEvents();
            Thread.Sleep(2000);
            
            MyDevice.StopEthernetDiscovery();
            
            if (MyDevice.GetNumberOfDetectedNetworkDevices() > 0)
            {
                lstEthDevices.Enabled = true;
                lstEthDevices.Items.Clear();
                cmdEthConnect.Enabled = true;
            }
            else
            {
                lstEthDevices.Items.Clear();
                lstEthDevices.Items.Add("No device detected");
                cmdEthConnect.Enabled = false;
            }
            for (int k = 0; k &lt; MyDevice.GetNumberOfDetectedNetworkDevices(); k++)
            {
                MyDevice.ConnectToNetworkDevice(MyDevice.EthDeviceIP[k]);
            
                MyDevice.GetUserID(ref userID);
                lstEthDevices.Items.Add(MyDevice.GetDeviceTypeName() + " (" + userID + ")");
            
                MyDevice.DisconnectDevice();
            }
            </code>
            </example>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetCurrentIPAddress">
            <summary>
            Returns current device IP address
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.StartAutoPingingNetworkDevice">
            <summary>
            Start automatic pinging of network device to ensure the device is not breaking up the connection due to the timeout
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.StopAutoPingingNetworkDevice">
            <summary>
            Stops automatic pinging process
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.CalculateChecksum(System.Byte[]@)">
            <summary>
              Calculates the checksum for the packet specified (sum % 256)
            </summary>
            <param name="packet">Pointer to 8 byte array</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendEthRequest(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[]@)">
            <summary>
              Function creates packet, calculates checksum, sends it to the device and waits for the response packet with the same Request ID
            </summary>
            <param name="type">Packet type</param>
            <param name="param1">Parameter 1</param>
            <param name="param2">Parameter 2</param>
            <param name="param3">Parameter 3</param>
            <param name="param4">Parameter 4</param>
            <param name="answer">Pointer to array that gets filled with response packet</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendEthRequestEx(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[]@,System.Byte[]@)">
            <summary>
              Function creates packet, calculates checksum, sends it to the device and waits for the response packet with the same Request ID
            </summary>
            <param name="type">Packet type</param>
            <param name="useExtended">1 to indicate extended packet</param>
            <param name="data3">Parameter 2</param>
            <param name="data4">Parameter 3</param>
            <param name="data5">Parameter 4</param>
            <param name="Request">Pointer to array that has extended request data</param>
            <param name="answer">Pointer to array that gets filled with response packet</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendEthRequestExFull(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[]@,System.Byte[]@)">
            <summary>
              Function creates packet, calculates checksum, sends it to the device and waits for the response packet with the same Request ID
            </summary>
            <param name="type">Packet type</param>
            <param name="useExtended">1 to indicate extended packet</param>
            <param name="data3">Parameter 2</param>
            <param name="data4">Parameter 3</param>
            <param name="data5">Parameter 4</param>
            <param name="Request">Pointer to array that has extended request data</param>
            <param name="answer">Pointer to array that gets filled with response packet</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendEthRequestExFull2(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[]@,System.Byte[]@)">
            <summary>
              Function creates packet, calculates checksum, sends it to the device and waits for the response packet with the same Request ID
            </summary>
            <param name="type">Packet type</param>
            <param name="data2">Parameter 1</param>
            <param name="data3">Parameter 2</param>
            <param name="data4">Parameter 3</param>
            <param name="data5">Parameter 4</param>
            <param name="Request">Pointer to array that has extended request data</param>
            <param name="answer">Pointer to array that gets filled with response packet</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendEthReportEx(System.Byte[]@)">
            <summary>
              Sends the report specified
            </summary>
            <param name="OutPacket">Pointer to 64 byte array for outgoing data</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEthReportEx(System.Byte[]@)">
            <summary>
              Receives the report from the device
            </summary>
            <param name="InPacket">Pointer to 64 byte array for incoming data</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendRequest(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[]@,System.Int32)">
            <summary>
              Function creates packet, calculates checksum, sends it to the device and waits for the response packet with the same Request ID
            </summary>
            <param name="type">Packet type</param>
            <param name="param1">Parameter 1</param>
            <param name="param2">Parameter 2</param>
            <param name="param3">Parameter 3</param>
            <param name="param4">Parameter 4</param>
            <param name="answer">Pointer to array that gets filled with response packet</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendReport(System.Byte[]@)">
            <summary>
              Sends the report specified
            </summary>
            <param name="OutPacket">Pointer to 8 byte array for outgoing data</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetReport(System.Byte[]@)">
            <summary>
              Receives the report from the device
            </summary>
            <param name="InPacket">Pointer to 8 byte array for incoming data</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.CalculateChecksumEx(System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendRequestExFull(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[]@,System.Byte[]@)">
            <summary>
              Function creates packet, calculates checksum, sends it to the device and waits for the response packet with the same Request ID
            </summary>
            <param name="type">Packet type</param>
            <param name="useExtended">1 to indicate extended packet</param>
            <param name="data3">Parameter 2</param>
            <param name="data4">Parameter 3</param>
            <param name="data5">Parameter 4</param>
            <param name="Request">Pointer to array that has extended request data (upper 56 byte)</param>
            <param name="answer">Pointer to array that gets filled with response packet (all bytes)</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendRequestExFull2(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[]@,System.Byte[]@)">
            <summary>
              Function creates packet, calculates checksum, sends it to the device and waits for the response packet with the same Request ID
            </summary>
            <param name="type">Packet type</param>
            <param name="data2">Parameter 1</param>
            <param name="data3">Parameter 2</param>
            <param name="data4">Parameter 3</param>
            <param name="data5">Parameter 4</param>
            <param name="Request">Pointer to array that has extended request data</param>
            <param name="answer">Pointer to array that gets filled with response packet</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendRequestEx(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[]@,System.Byte[]@)">
            <summary>
              Function creates packet, calculates checksum, sends it to the device and waits for the response packet with the same Request ID
            </summary>
            <param name="type">Packet type</param>
            <param name="useExtended">1 to indicate extended packet</param>
            <param name="data3">Parameter 2</param>
            <param name="data4">Parameter 3</param>
            <param name="data5">Parameter 4</param>
            <param name="Request">Pointer to array that has extended request data</param>
            <param name="answer">Pointer to array that gets filled with response packet</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SendReportEx(System.Byte[]@)">
            <summary>
              Sends the extended report
            </summary>
            <param name="OutPacket">Pointer to 64 byte array for outgoing data</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetReportEx(System.Byte[]@)">
            <summary>
              Receives the extended report from the device
            </summary>
            <param name="InPacket">Pointer to 63 byte array for incoming data</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_SetupPulseEngine(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Configure (setup) the pulse engine
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_GetAxisConfiguration(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Retrieve single axis parameters. Axis ID is in param1
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_SetAxisConfiguration(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Set single axis parameters. Axis ID is in param1
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_SetPositions(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Set positions - param2 is used for bit-mapped axis selection
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_SetState(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Set pulse engine state
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_Move(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Execute the move. Position or speed is specified by the ReferencePositionSpeed
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_ExternalOutputsGet(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Read external outputs state - save them to ExternalRelayOutputs and ExternalOCOutputs
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_ExternalOutputsSet(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Set external outputs state (from ExternalRelayOutputs and ExternalOCOutputs)
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_AdditionalParametersGet(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Read additional parameters
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_AdditionalParametersSet(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Write additional parameters
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_FillBuffer(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Transfer motion buffer to device. The number of new entries (newMotionBufferEntries) must be specified
            The number of accepted entries is saved to motionBufferEntriesAccepted. 
            In addition, pulse engine state is read (PEv2_GetStatus)
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_TransferRAW(PoKeysDevice_DLL.sPoKeysPEv2@,System.Byte,System.Byte)">
            <summary>
            Transfer RAW contents of motion buffer to PoKeys device
            </summary>
            <param name="PEstruct"></param>
            <param name="dataLen"></param>
            <param name="endPart"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_ClearBuffer(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Clear motion buffer in device
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_RebootEngine(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Reboot pulse engine v2
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_StartHoming(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Start the homing procedure. Home offsets must be provided in the HomeOffsets
            Axes to home are selected as bit-mapped HomingStartMaskSetup value
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_FinishHoming(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Finish the homing procedure
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_StartProbing(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Star the probing procedure. 
            ProbeMaxPosition defines the maximum position in position ticks where probing error will be thrown
            ProbeSpeed defines the probing speed (1 = max speed)
            ProbeInput defines the extenal input (values 1-8) or PoKeys pin (0-based Pin ID + 9)
            ProbeInputPolarity defines the polarity of the probe signal
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PEv2_FinishProbing(PoKeysDevice_DLL.sPoKeysPEv2@)">
            <summary>
            Finish the probing procedure. Probe position and status are saved to ProbePosition and ProbeStatus
            </summary>
            <param name="PEstruct"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PEv2_GetSpindleRPM(System.Int32)">
            <summary>
            Return spindle RPM
            </summary>
            <param name="sensorType"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.Finalize">
            <summary>
            Class destructor. Stops any ongoing communication with the device.
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetCurrentDeviceConnectionType">
            <summary>
            Returns current connection type (USB or network)
            </summary>
            <returns>Connection type enum</returns>
            <seealso cref="T:PoKeysDevice_DLL.ePoKeysDeviceConnectionType"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPinCapabilities(System.Int32)">
            <summary>
            Returns pin capabilities of the selected pin
            </summary>
            <param name="pinID">Pin number (0-based)</param>
            <returns>Pin capabilities enum</returns>
            <seealso cref="T:PoKeysDevice_DLL.ePinCap"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetLastCommandLatency">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceID(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the device data (THIS FUNCTION CALL IS OBSOLETE, SEE THE REVISED VERSION <see cref="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceIDEx(System.Int32@,System.Int32@,System.Int32@)"/>)
            </summary>
            <param name="firmwareVersion">Device firmware version</param>
            <param name="pinNum">Number of pins on the device</param>
            <param name="SerialNumber">Serial number of the device</param>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceType">
            <summary>
            Returns the device type
            </summary>
            <returns>
            <para>0, 1 or 2 for PoKeys55 devices</para>
            <para>3 for PoKeys55 device in recovery mode</para>
            <para>10 for PoKeys56U</para>
            <para>11 for PoKeys56E</para>
            <para>15 for PoKeys56U device in recovery mode</para>
            <para>16 for PoKeys56E device in recovery mode</para>
            <para>20 for PoKeys56U device with PoTLog27U firmware</para>
            <para>21 for PoKeys56E device with PoTLog27E firmware</para>
            <para>30 for PoKeys57U</para>
            <para>31 for PoKeys57E</para>
            </returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceTypeName"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceTypeName">
             <summary>
             Returns the device type name
             </summary>
             <returns>String description of the device type</returns>
             <example>The following example enumerates the devices and lists them in the listbox:
             <code>
                // Enumerate and list USB devices
                int i = MyDevice.EnumerateDevices();
                byte userID = 0;
                lstUSBdevices.Items.Clear();
            
                if (i &gt; 0)
                {
                    lstUSBdevices.Enabled = true;
                    lstUSBdevices.Items.Clear();
                }
                else
                {
                    lstUSBdevices.Enabled = false;
                    lstUSBdevices.Items.Clear();
                    lstUSBdevices.Items.Add("No device detected");
                }
            
                for (int k = 0; k &lt; i; k++)
                {
                    MyDevice.ConnectToDevice(k);
            
                    MyDevice.GetUserID(ref userID);
                    lstUSBdevices.Items.Add(MyDevice.GetDeviceTypeName() + " (" + userID + ")");
            
                    MyDevice.DisconnectDevice();
                }
             </code>
             </example>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceType"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceName">
            <summary>
            Returns the device name
            </summary>
            <returns>Device name</returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceTypeName"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.getHWName">
            <summary>
            Return the device name (hardware type)
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.isDeviceBootloader">
            <summary>
            Returnes True if current device is in bootloader mode
            </summary>
            <returns>Bootloader mode</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceFirmwareVersionString">
            <summary>
             Returns device firmware version in string format
            </summary>
            <returns>Device firmware version in string format</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceIDEx(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Retrieves the device data (version x.y.z and serial number)
            </summary>
            <param name="firmwareVersionMajor">Major firmware version - first two digits of the version: x = firmwareVersionMajor / 16, y = firmwareVersionMajor mod 16</param>
            <param name="firmwareVersionMinor">Minir firmware version - z = firmwareVersionMinor</param>
            <param name="SerialNumber">Serial number of the device</param>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetBuildDate(System.String@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetUserID(System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceIDEx(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Retrieves the device data (version x.y.z and serial number)
            </summary>
            <param name="firmwareVersionMajor">Major firmware version - first two digits of the version: x = firmwareVersionMajor / 16, y = firmwareVersionMajor mod 16</param>
            <param name="firmwareVersionMinor">Minir firmware version - z = firmwareVersionMinor</param>
            <param name="firmwareVersionMajor2">Major secondary firmware version (application version when in bootloader)</param>
            <param name="firmwareVersionMinor2">Minor secondary firmware version (application version when in bootloader)</param>
            <param name="SerialNumber">Serial number of the device</param>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetBuildDate(System.String@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetUserID(System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetBuildDate(System.String@)">
            <summary>
            Returns the firmware build date in string format
            </summary>
            <param name="buildDate"></param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetDeviceIDEx(System.Int32@,System.Int32@,System.Int32@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetUserID(System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetUserID(System.Byte@)">
             <summary>
             Retrieves user ID
             </summary>
             <param name="userID">User ID</param>
             <returns></returns>
             <example>The following example enumerates the devices and lists them in the listbox:
             <code>
                // Enumerate and list USB devices
                int i = MyDevice.EnumerateDevices();
                byte userID = 0;
                lstUSBdevices.Items.Clear();
            
                if (i &gt; 0)
                {
                    lstUSBdevices.Enabled = true;
                    lstUSBdevices.Items.Clear();
                }
                else
                {
                    lstUSBdevices.Enabled = false;
                    lstUSBdevices.Items.Clear();
                    lstUSBdevices.Items.Add("No device detected");
                }
            
                for (int k = 0; k &lt; i; k++)
                {
                    MyDevice.ConnectToDevice(k);
            
                    MyDevice.GetUserID(ref userID);
                    lstUSBdevices.Items.Add(MyDevice.GetDeviceTypeName() + " (" + userID + ")");
            
                    MyDevice.DisconnectDevice();
                }
             </code>
             </example>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetUserIDAndLockStatus(System.Byte@,System.Byte@)"/>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetUserID(System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetUserIDAndLockStatus(System.Byte@,System.Byte@)">
            <summary>
            Retrieves user ID and lock status
            </summary>
            <param name="userID">User ID</param>
            <param name="lockStatus">Lock status (1 if device is locked)</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetUserID(System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetUserID(System.Byte)">
            <summary>
            Sets user ID
            </summary>
            <param name="newUserID">new user ID</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetUserID(System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetUserDeviceName(System.String@)">
            <summary>
            Reads device name set by the user
            </summary>
            <param name="deviceName">device name string</param>
            <returns>True if read was successfull</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetUserDeviceNameLong(System.String@)">
            <summary>
            Reads device name set by the user
            </summary>
            <param name="deviceName">device name string</param>
            <returns>True if read was successfull</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetUserDeviceName(System.String@)">
            <summary>
            Sets device name
            </summary>
            <param name="deviceName">New device name string</param>
            <returns>True if write was successfull</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetUserDeviceNameLong(System.String@)">
            <summary>
            Sets device name
            </summary>
            <param name="deviceName">New device name string</param>
            <returns>True if write was successfull</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetUserJoystickName(System.String@)">
            <summary>
            Reads device name set by the user
            </summary>
            <param name="deviceName">device name string</param>
            <returns>True if read was successfull</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetUserJoystickName(System.String@)">
            <summary>
            Sets device name
            </summary>
            <param name="deviceName">New device name string</param>
            <returns>True if write was successfull</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDevicePID(System.Byte@)">
            <summary>
            Reads device PID set by the user
            </summary>
            <param name="devicePID">device PID</param>
            <returns>True if read was successfull</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetDevicePID(System.Byte@)">
            <summary>
            Sets device PID set by the user
            </summary>
            <param name="devicePID">device PID</param>
            <returns>True if write was successfull</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetLoadStatus(System.Byte@)">
            <summary>
            Reads current load status of the device
            </summary>
            <param name="CPUload">0 to 255, 0 to 100 when in normal operation mode, more than 100 means the device is skipping cycles</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetLoadStatusEx(System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Reads current load status of the device
            </summary>
            <param name="CPUload">0 to 255, 0 to 100 when in normal operation mode, more than 100 means the device is skipping cycles</param>
            <param name="maxCPUload">0 to 255, 0 to 100 when in normal operation mode, more than 100 means the device is skipping cycles</param>
            <param name="minCPUload">0 to 255, 0 to 100 when in normal operation mode, more than 100 means the device is skipping cycles</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.USBConfigurationGet(System.Byte@)">
            <summary>
            Read the status of USB interface configuration
            </summary>
            <param name="USBconfig"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetFastUSBEnableStatus(System.Boolean@)">
            <summary>
            Read the status of fast USB interface activation
            </summary>
            <param name="fastUSBenabled"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetFastUSBEnableStatus(System.Boolean@)">
            <summary>
            Set the status of fast USB interface activation
            </summary>
            <param name="fastUSBenabled"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.USBConfigurationSet(System.Byte@)">
            <summary>
            Set the USB interface configuration
            </summary>
            <param name="USBconfig"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetSecurityStatus(System.Byte@)">
            <summary>
            Reads the current security status of network device
            </summary>
            <param name="securityLevel">Current security level of the device</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.AuthorizeUser(System.String@,System.Byte@,System.Boolean@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetUserSecurityPassword(System.String@,System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.AuthorizeUser(System.String@,System.Byte@,System.Boolean@)">
            <summary>
            Authorises user on the device - changes the security level to the specified value
            </summary>
            <param name="userPassword">User password (up to 32 characters)</param>
            <param name="securityLevel">New security level</param>
            <param name="UserAuthorised">True if the authorisation succeeded</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetSecurityStatus(System.Byte@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetUserSecurityPassword(System.String@,System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetUserSecurityPassword(System.String@,System.Byte@)">
            <summary>
            Sets the password for the network device. This can be executed only at the full access security level
            </summary>
            <param name="userPassword">New user password</param>
            <param name="defaultSecurityLevel">Default security level for unauthorised users</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetSecurityStatus(System.Byte@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.AuthorizeUser(System.String@,System.Byte@,System.Boolean@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set pin function (OBSOLETE FUNCTION) - use <see cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte)"/>
            </summary>
            <param name="pinID"></param>
            <param name="pinFunction"></param>
            <param name="pullUpDownResistor"></param>
            <param name="invertPin"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte)">
            <summary>
            Set pin data
            </summary>
            <param name="pinID">Pid ID (0-based)</param>
            <param name="pinFunction">Pin function byte according to the manual:
            <para>bit 0: obsolete</para>
            <para>bit 1: digital input</para>
            <para>bit 2: digital output</para>
            <para>bit 3: analog input</para>
            <para>bit 4: analog output</para>
            <para>bit 5: triggered input</para>
            <para>bit 6: digital counter input</para>
            <para>bit 7: invert state</para>
            </param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte,System.Byte)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@,System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set pin data with counter options
            </summary>
            <param name="pinID">Pid ID (0-based)</param>
            <param name="pinFunction">Pin function byte according to the manual:
            <para>bit 0: obsolete</para>
            <para>bit 1: digital input</para>
            <para>bit 2: digital output</para>
            <para>bit 3: analog input</para>
            <para>bit 4: analog output</para>
            <para>bit 5: triggered input</para>
            <para>bit 6: digital counter input</para>
            <para>bit 7: invert state</para>
            </param>
            <param name="CounterOptions">Pin counter options according to the manual:
            <para>bit 0: count rising edges (fast counter)</para>
            <para>bit 1: count falling edges (fast counter)</para>
            </param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@,System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetConnectionSignalData(System.Byte)">
            <summary>
            Sets connection signal pins data
            </summary>
            <param name="data">Bit mapped connection signal pins 48 to 55</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetConnectionSignalData(System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetConnectionSignalData(System.Byte@)">
            <summary>
            Retrieves connection signal pins data
            </summary>
            <param name="data">Bit mapped connection signal pins 48 to 55</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetConnectionSignalData(System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDelayedStartConfiguration(System.Byte@)">
            <summary>
            Retrieves delayed start configuration
            </summary>
            <param name="delay">Time delay in x100 ms</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetDelayedStartConfiguration(System.Byte@)">
            <summary>
            Sets delayed start configuration
            </summary>
            <param name="delay">Time delay in x100 ms</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAutoSetOutputs(System.Byte)">
            <summary>
            Set automatic outputs initialization option
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAutoSetOutputs(System.Byte,System.Byte[]@)">
            <summary>
            Set automatic outputs initialization option
            </summary>
            <param name="setting"></param>
            <param name="outputs">Array of 7-bytes with bit-mapped outputs status</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAutoSetOutputs(System.Byte@)">
            <summary>
            Get automatic outputs initialization option
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAutoSetOutputs(System.Byte@,System.Byte[]@)">
            <summary>
            Get automatic outputs initialization option
            </summary>
            <param name="setting"></param>
            <param name="outputs">Array of 7-bytes with bit-mapped outputs status</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Retrieves pin data (OBSOLETE FUNCTION) - use <see cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@)"/>
            </summary>
            <param name="pinID"></param>
            <param name="pinFunction"></param>
            <param name="pullUpDownResistor"></param>
            <param name="invertPin"></param>
            <param name="pinPossibleFunctions"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@)">
            <summary>
            Reads pin data
            </summary>
            <param name="pinID">Pid ID (0-based)</param>
            <param name="pinFunction">Pin function byte according to the manual:
            <para>bit 0: obsolete</para>
            <para>bit 1: digital input</para>
            <para>bit 2: digital output</para>
            <para>bit 3: analog input</para>
            <para>bit 4: analog output</para>
            <para>bit 5: triggered input</para>
            <para>bit 6: digital counter input</para>
            <para>bit 7: invert state</para>
            </param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@,System.Byte@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@,System.Byte@)">
            <summary>
            Reads pin data with counter options
            </summary>
            <param name="pinID">Pid ID (0-based)</param>
            <param name="pinFunction">Pin function byte according to the manual:
            <para>bit 0: obsolete</para>
            <para>bit 1: digital input</para>
            <para>bit 2: digital output</para>
            <para>bit 3: analog input</para>
            <para>bit 4: analog output</para>
            <para>bit 5: triggered input</para>
            <para>bit 6: digital counter input</para>
            <para>bit 7: invert state</para>
            </param>
            <param name="CounterOptions">Pin counter options according to the manual:
            <para>bit 0: count rising edges (fast counter)</para>
            <para>bit 1: count falling edges (fast counter)</para>
            </param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPinData(System.Byte,System.Byte@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPinData(System.Byte,System.Byte,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPinKeyMapping(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets pin key mapping options (OBSOLETE)
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <param name="KeyCode">USB HID key code for the pin</param>
            <param name="KeyModifier">USB HID key modifier for the pin</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPinKeyMapping(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets pin key mapping options
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <param name="PinKeyMappingType">Key mapping type according to the manual: 
            <para>bit 0: enable key mapping</para>
            <para> bit 1: direct key mapping</para>
             <para>bit 2: key mapped to macro (KeyCode is macro ID)</para>
             <para>bit 3: key mapped to continous macro (same as above, but macro is refiring if input is still active)</para>
             <para>bit 4: key repeating (after a delay, the key is being repeatedly fired with a given rate)</para>
             <para>bit 5: </para>
             <para>bit 6: </para>
             <para>bit 7: </para>
            </param>
            <param name="KeyCode">USB HID key code for the pin</param>
            <param name="KeyModifier">USB HID key modifier for the pin</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPinMacroMapping(System.Byte,System.Byte)">
            <summary>
            Set pin macro mappping options 
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <param name="MacroID">Macro ID</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPinKeyMapping(System.Byte,System.Byte@,System.Byte@)">
            <summary>
            Reads pin key mapping (OBSOLETE)
            </summary>
            <param name="pinID"></param>
            <param name="KeyCode"></param>
            <param name="KeyModifier"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPinKeyMapping(System.Byte,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Reads pin key mapping
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <param name="PinKeyMappingType">Key mapping type according to the manual: 
            <para>bit 0: enable key mapping</para>
            <para> bit 1: direct key mapping</para>
             <para>bit 2: key mapped to macro (KeyCode is macro ID)</para>
             <para>bit 3: key mapped to continous macro (same as above, but macro is refiring if input is still active)</para>
             <para>bit 4: key repeating (after a delay, the key is being repeatedly fired with a given rate)</para>
             <para>bit 5: </para>
             <para>bit 6: </para>
             <para>bit 7: </para>
            </param>
            <param name="KeyCode">USB HID key code for the pin</param>
            <param name="KeyModifier">USB HID key modifier for the pin</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPinMacroMapping(System.Byte,System.Byte@)">
            <summary>
            Reads pin macro mapping
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <param name="MacroID">Macro ID</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetTriggeredInputMapping(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Sets triggered input mapping options
            </summary>
            <param name="downKeyCodes">Array of 55 key codes for 'Key down' events</param>
            <param name="downKeyModifiers">Array of 55 key modifiers for 'Key down' events</param>
            <param name="upKeyCodes">Array of 55 key codes for 'Key up' events</param>
            <param name="upKeyModifiers">Array of 55 key modifiers for 'Key up' events</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetTriggeredInputMapping(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Reads triggered input mapping options
            </summary>
            <param name="downKeyCodes">Array of 55 key codes for 'Key down' events</param>
            <param name="downKeyModifiers">Array of 55 key modifiers for 'Key down' events</param>
            <param name="upKeyCodes">Array of 55 key codes for 'Key up' events</param>
            <param name="upKeyModifiers">Array of 55 key modifiers for 'Key up' events</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetTypeMaticDelaysAndRates(System.Byte[]@,System.Byte[]@)">
            <summary>
            Sets the typematic delay and repeat rate for each pin. Values are based on 5 ms intervals
            </summary>
            <param name="delays">Array of 55 delays - 5 ms based</param>
            <param name="rates">Array of 55 repeat delays - 5 ms based</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetTypeMaticDelaysAndRates(System.Byte[]@,System.Byte[]@)">
            <summary>
            Gets the typematic delay and repeat rate for each pin. Values are based on 5 ms intervals
            </summary>
            <param name="delays">Array of 55 delays - 5 ms based</param>
            <param name="rates">Array of 55 repeat delays - 5 ms based</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoderSettings(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set encoder settings
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="encoderOption">Encoder options according to the manual: 
            <para>bit 0: enable encoder</para>
            <para>bit 1: 4x sampling</para>
            <para>bit 2: 2x sampling</para>
            <para>bit 3: reserved</para>
            <para>bit 4: direct key mapping for direction A</para>
            <para>bit 5: mapped to macro for direction A</para>
            <para>bit 6: direct key mapping for direction B</para>
            <para>bit 7: mapped to macro for direction B</para>
            </param>
            <param name="pinChannelA">Pin ID for the channel A (0-based)</param>
            <param name="pinChannelB">Pin ID for the channel B (0-based)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoderSettings(System.Byte,System.Boolean,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set encoder settings with macro mapping for A and B
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="encoderEnabled">1 if encoder is to be enabled</param>
            <param name="pinChannelA">Pin ID for the channel A (0-based)</param>
            <param name="pinChannelB">Pin ID for the channel B (0-based)</param>
            <param name="macroID_DirA">Macro ID for direction A mapping</param>
            <param name="macroID_DirB">Macro ID for direction B mapping</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoderSettings(System.Byte,System.Boolean,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set encoder settings with direct key mapping for A and B
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="encoderEnabled">1 if encoder is to be enabled</param>
            <param name="pinChannelA">Pin ID for the channel A (0-based)</param>
            <param name="pinChannelB">Pin ID for the channel B (0-based)</param>
            <param name="KeyCode_DirA">USB HID key code for direction A</param>
            <param name="KeyModifier_DirA">USB HID key modifier for direction A</param>
            <param name="KeyCode_DirB">USB HID key code for direction B</param>
            <param name="KeyModifier_DirB">USB HID key modifier for direction B</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoderKeyMappingDirA(System.Byte,System.Byte)">
            <summary>
            Set encoder macro mapping for direction A
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="macroID">Macro ID</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoderKeyMappingDirA(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set encoder key mapping for direction A
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="KeyCode">USB HID key code</param>
            <param name="KeyModifier">USB HID key modifier</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoderKeyMappingDirB(System.Byte,System.Byte)">
            <summary>
            Set encoder macro mapping for direction B
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="macroID">Macro ID</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoderKeyMappingDirB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set encoder key mapping for direction B
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="KeyCode">USB HID key code</param>
            <param name="KeyModifier">USB HID key modifier</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoderValue(System.Byte,System.Byte@)">
            <summary>
            Read current encoder value
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="encoderValue">Lowest 8-bit of encoder counter</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ResetEncoderValue(System.Byte)">
            <summary>
            Reset encoder value to 0
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoderRAWValue(System.Byte,System.Int32@)">
            <summary>
            Read encoder RAW value
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="encoderValue">32-bit RAW encoder counter value</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoders1_13_RAWValue(System.Int32[]@)">
            <summary>
            Read RAW value for encoders 1 to 13
            </summary>
            <param name="encoderValue">Array of 32-bit RAW encoder counter values</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoders14_25_RAWValue(System.Int32[]@)">
            <summary>
            Read RAW value for encoders 14 to 25
            </summary>
            <param name="encoderValue">Array of 32-bit RAW encoder counter values</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoders14_26_RAWValue(System.Int32[]@)">
            <summary>
            Read RAW value for encoders 14 to 26 (with ultra fast encoder as 26)
            </summary>
            <param name="encoderValue">Array of 32-bit RAW encoder counter values</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoders1_13_RAWValue(System.Int32[]@)">
            <summary>
            Write RAW value for encoders 1 to 13
            </summary>
            <param name="encoderValue">Array of 32-bit RAW encoder counter values</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetEncoders14_25_RAWValue(System.Int32[]@)">
            <summary>
            Write RAW value for encoders 14 to 25
            </summary>
            <param name="encoderValue">Array of 32-bit RAW encoder counter values</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoderSettings(System.Byte,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Read encoder settings
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="encoderOption">Encoder options according to the manual: 
            <para>bit 0: enable encoder</para>
            <para>bit 1: 4x sampling</para>
            <para>bit 2: 2x sampling</para>
            <para>bit 3: reserved</para>
            <para>bit 4: direct key mapping for direction A</para>
            <para>bit 5: mapped to macro for direction A</para>
            <para>bit 6: direct key mapping for direction B</para>
            <para>bit 7: mapped to macro for direction B</para>
            </param>
            <param name="pinChannelA">Pin ID for the channel A (0-based)</param>
            <param name="pinChannelB">Pin ID for the channel B (0-based)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoderKeyMappingDirA(System.Byte,System.Byte@,System.Byte@)">
            <summary>
            Reads encoder mapping configuration for direction A
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="KeyCodeMacroID">USB HID key code for direction A (or macro ID if macro mapping is enabled)</param>
            <param name="KeyModifier">USB HID key modifier for direction A (if direct key mapping is enabled)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoderKeyMappingDirB(System.Byte,System.Byte@,System.Byte@)">
            <summary>
            Reads encoder mapping configuration for direction B
            </summary>
            <param name="encoderID">Encoder ID (0 to 24)</param>
            <param name="KeyCodeMacroID">USB HID key code for direction B (or macro ID if macro mapping is enabled)</param>
            <param name="KeyModifier">USB HID key modifier for direction B (if direct key mapping is enabled)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetFastEncodersStatus(System.Byte)">
            <summary>
            Set fast encoder settings
            </summary>
            <param name="status">Option byte according to the manual (command 0xCE)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetFastEncodersStatusWOptions(System.Byte,System.Byte)">
            <summary>
            Set fast encoder settings and options
            </summary>
            <param name="status">Option byte according to the manual (command 0xCE)</param>
            <param name="additionalOptions">Additional options as described in the manual</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetFastEncodersStatus(System.Byte@)">
            <summary>
            Read fast encoder settings
            </summary>
            <param name="status">Option byte according to the manual (command 0xCE)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetFastEncodersStatusWOptions(System.Byte@,System.Byte@)">
            <summary>
            Read fast encoder settings
            </summary>
            <param name="status">Option byte according to the manual (command 0xCE)</param>
            <param name="additionalOptions">Additional options as described in the manual</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetUltraFastEncodersSettings(System.Byte,System.Byte)">
            <summary>
            Set ultra fast encoder settings
            </summary>
            <param name="enabled">1 to enable ultra fast encoder support</param>
            <param name="settings">Additional options byte according to the manual (command 0x1C)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetUltraFastEncodersSettings(System.Byte,System.Byte,System.Int32)">
            <summary>
            Set ultra fast encoder settings
            </summary>
            <param name="enabled">1 to enable ultra fast encoder support</param>
            <param name="settings">Additional options byte according to the manual (command 0x1C)</param>
            <param name="filter">Digital filter sampling delay</param>
            <returns></returns>
            
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetUltraFastEncodersSettings(System.Byte,System.Byte,System.Int32,System.Byte)">
            <summary>
            Set ultra fast encoder settings
            </summary>
            <param name="enabled">1 to enable ultra fast encoder support</param>
            <param name="settings">Additional options byte according to the manual (command 0x1C)</param>
            <param name="filter">Digital filter sampling delay</param>
            <param name="resetOnIndex">Reset on next encoder index</param>
            <returns></returns>
            
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetUltraFastEncodersSettings(System.Byte@,System.Byte@)">
            <summary>
            Read ultra fast encoder settings
            </summary>
            <param name="enabled">1 to enable ultra fast encoder support</param>
            <param name="settings">Additional options byte according to the manual (command 0x1C)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetUltraFastEncodersSettings(System.Byte@,System.Byte@,System.Int32@)">
            <summary>
            Get ultra fast encoder settings
            </summary>
            <param name="enabled">1 to enable ultra fast encoder support</param>
            <param name="settings">Additional options byte according to the manual (command 0x1C)</param>
            <param name="filter">Digital filter sampling delay</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetTickCounter(System.UInt32@)">
            <summary>
            Reads current value of tick counter
            </summary>
            <param name="tickCounter">Unsigned 32-bit counter value</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDigitalCountersValues(System.Int32[]@)">
            <summary>
            Reads current values of digital counters
            </summary>
            <param name="countersValues">Array of 55 32-bit counters values</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetDigitalCounterDirectionPin(System.Byte[]@)">
            <summary>
            Sets direction pins for the digital counters
            </summary>
            <param name="dirPins">Array of 55 bytes (value of 0 for no direction pin, else 1-based pin ID)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDigitalCounterDirectionPin(System.Byte[]@)">
            <summary>
            Retrieves direction pins for the digital counters
            </summary>
            <param name="dirPins">Array of 55 bytes (value of 0 for no direction pin, else 1-based pin ID)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.IsCounterAvailable(System.Byte)">
            <summary>
            Checks if specified pin supports digital counter
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <returns>True if digital counter is supported on a specified pin</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ResetDigitalCounters">
            <summary>
            Resets values of digital counters
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetInput(System.Byte,System.Boolean@)">
            <summary>
            Reads current state of digital input
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <param name="inputState">Boolean value of current state of digital input</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetInput(System.Byte)">
            <summary>
            Returns current value of the digital input
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetInputI(System.Byte)">
            <summary>
            Returns current value of the digital input
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetOutput(System.Byte,System.Boolean)">
            <summary>
            Sets digital output state
            </summary>
            <param name="pinID">Pin ID (0-based)</param>
            <param name="outputState">Boolean value of digital output state</param>
            <returns></returns>
            <remarks>Before using this command, pin must be set as digital output. After power-up, 
            all pins are set as digital inputs due to security reasons.</remarks>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SaveConfiguration">
            <summary>
            Initiates configuration save procedure in the device to ensure the settings are restored when the device
            is powered up. This command may take longer to execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SaveConfigurationAndSetDeviceLock">
            <summary>
            Initiates configuration save procedure in the device to ensure the settings are restored when the device
            is powered up. This function also sets the configuration lock to protect settings in the device. 
            This command may take longer to execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ClearConfiguration">
            <summary>
            Initiates configuration clear procedure in the device. This command may take longer to execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetJoystickMapping(System.Byte[]@,System.Byte[]@)">
            <summary>
            Set joystick mapping options
            </summary>
            <param name="axesMapping">Array of 6 bytes (one byte per axis) that contain the 1-based pin codes (analog inputs have pin codes from 41/43 to 47), axes have the following order: rotation x, rotation y, x, y, z and throttle</param>
            <param name="buttonsMapping">Array of 32 bytes that contain 1-based pin codes (set to 0 to disable button mapping)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetJoystickMapping(System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Set joystick mapping options
            </summary>
            <param name="axesMapping">Array of 6 bytes (one byte per axis) that contain the 1-based pin codes (analog inputs have pin codes from 41/43 to 47), axes have the following order: rotation x, rotation y, x, y, z and throttle</param>
            <param name="buttonsMapping">Array of 32 bytes that contain 1-based pin codes (set to 0 to disable button mapping)</param>
            <param name="HATpins">Array of 4 bytes that contain 1-based pin codes of the HAT switch (order: North, East, South, West)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetJoystickMapping(System.Byte[]@,System.Byte[]@)">
            <summary>
            Read joystick mapping options
            </summary>
            <param name="axesMapping">Array of 6 bytes (one byte per axis) that contain the 1-based pin codes (analog inputs have pin codes from 41/43 to 47), axes have the following order: rotation x, rotation y, x, y, z and throttle</param>
            <param name="buttonsMapping">Array of 32 bytes that contain 1-based pin codes (0 means disabled button mapping)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetJoystickMapping(System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Read joystick mapping options
            </summary>
            <param name="axesMapping">Array of 6 bytes (one byte per axis) that contain the 1-based pin codes (analog inputs have pin codes from 41/43 to 47), axes have the following order: rotation x, rotation y, x, y, z and throttle</param>
            <param name="buttonsMapping">Array of 32 bytes that contain 1-based pin codes (0 means disabled button mapping)</param>
            <param name="HATpins">Array of 4 bytes that contain 1-based pin codes of the HAT switch (order: North, East, South, West)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetJoystickTriggeredMapping(System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Set joystick triggered mapping options
            </summary>
            <param name="triggeredMappingEnabled">Array of 32 boolean values - set to True to enable specified button to be triggering mapped</param>
            <param name="axesMapping">Array of 6 bytes (one byte per axis) that contain the 1-based pin codes (analog inputs have pin codes from 41/43 to 47), axes have the following order: rotation x, rotation y, x, y, z and throttle</param>
            <param name="buttonsMappingDown">Array of 32 byte values containing 1-based pin codes for down event mapping</param>
            <param name="buttonsMappingUp">Array of 32 byte values containing 1-based pin codes for up event mapping</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetJoystickTriggeredMapping(System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Set joystick triggered mapping options
            </summary>
            <param name="triggeredMappingEnabled">Array of 32 boolean values - set to True to enable specified button to be triggering mapped</param>
            <param name="axesMapping">Array of 6 bytes (one byte per axis) that contain the 1-based pin codes (analog inputs have pin codes from 41/43 to 47), axes have the following order: rotation x, rotation y, x, y, z and throttle</param>
            <param name="buttonsMappingDown">Array of 32 byte values containing 1-based pin codes for down event mapping</param>
            <param name="buttonsMappingUp">Array of 32 byte values containing 1-based pin codes for up event mapping</param>
            <param name="HATpins">Array of 4 bytes that contain 1-based pin codes of the HAT switch (order: North, East, South, West)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetJoystickTriggeredMapping(System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Read joystick triggered mapping options
            </summary>
            <param name="triggeredMappingEnabled">Array of 32 boolean values - set to True means specified button is triggering mapped</param>
            <param name="axesMapping">Array of 6 bytes (one byte per axis) that contain the 1-based pin codes (analog inputs have pin codes from 41/43 to 47), axes have the following order: rotation x, rotation y, x, y, z and throttle</param>
            <param name="buttonsMappingDown">Array of 32 byte values containing 1-based pin codes for down event mapping</param>
            <param name="buttonsMappingUp">Array of 32 byte values containing 1-based pin codes for up event mapping</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetJoystickTriggeredMapping(System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Read joystick triggered mapping options
            </summary>
            <param name="triggeredMappingEnabled">Array of 32 boolean values - set to True means specified button is triggering mapped</param>
            <param name="axesMapping">Array of 6 bytes (one byte per axis) that contain the 1-based pin codes (analog inputs have pin codes from 41/43 to 47), axes have the following order: rotation x, rotation y, x, y, z and throttle</param>
            <param name="buttonsMappingDown">Array of 32 byte values containing 1-based pin codes for down event mapping</param>
            <param name="buttonsMappingUp">Array of 32 byte values containing 1-based pin codes for up event mapping</param>
            <param name="HATpins">Array of 4 bytes that contain 1-based pin codes of the HAT switch (order: North, East, South, West)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetJoystickDigitalMapping(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Set joystick digital mapping options (see manual for more details)
            </summary>
            <param name="mappingLowType">Array of 6 bytes - mapping type for lower part</param>
            <param name="mappingLowKeyCode">Array of 6 bytes - USB HID key codes for lower part</param>
            <param name="mappingLowModifier">Array of 6 bytes - USB HID key modifiers for lower part</param>
            <param name="mappingLowDelay">Array of 6 bytes - delay settings for lower part</param>
            <param name="mappingLowMinRate">Array of 6 bytes - minimal rate delay for lower part</param>
            <param name="mappingLowMaxRate">Array of 6 bytes - maximal rate delay for lower part</param>
            <param name="mappingHighType">Array of 6 bytes - mapping type for upper part </param>
            <param name="mappingHighKeyCode">Array of 6 bytes - USB HID key codes for upper part</param>
            <param name="mappingHighModifier">Array of 6 bytes - USB HID key modifiers for upper part</param>
            <param name="mappingHighDelay">Array of 6 bytes - delay settings for upper part</param>
            <param name="mappingHighMinRate">Array of 6 bytes - minimal rate delay for upper part</param>
            <param name="mappingHighMaxRate">Array of 6 bytes - maximal rate delay for upper part</param>
            <param name="LowMargin1">Array of 6 bytes - lowest values</param>
            <param name="LowMargin2">Array of 6 bytes - low deadband values</param>
            <param name="HighMargin1">Array of 6 bytes - high deadband values</param>
            <param name="HighMargin2">Array of 6 bytes - highest values</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetJoystickDigitalMapping(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Reads joystick digital mapping options (see manual for more details)
            </summary>
            <param name="mappingLowType">Array of 6 bytes - mapping type for lower part</param>
            <param name="mappingLowKeyCode">Array of 6 bytes - USB HID key codes for lower part</param>
            <param name="mappingLowModifier">Array of 6 bytes - USB HID key modifiers for lower part</param>
            <param name="mappingLowDelay">Array of 6 bytes - delay settings for lower part</param>
            <param name="mappingLowMinRate">Array of 6 bytes - minimal rate delay for lower part</param>
            <param name="mappingLowMaxRate">Array of 6 bytes - maximal rate delay for lower part</param>
            <param name="mappingHighType">Array of 6 bytes - mapping type for upper part </param>
            <param name="mappingHighKeyCode">Array of 6 bytes - USB HID key codes for upper part</param>
            <param name="mappingHighModifier">Array of 6 bytes - USB HID key modifiers for upper part</param>
            <param name="mappingHighDelay">Array of 6 bytes - delay settings for upper part</param>
            <param name="mappingHighMinRate">Array of 6 bytes - minimal rate delay for upper part</param>
            <param name="mappingHighMaxRate">Array of 6 bytes - maximal rate delay for upper part</param>
            <param name="LowMargin1">Array of 6 bytes - lowest values</param>
            <param name="LowMargin2">Array of 6 bytes - low deadband values</param>
            <param name="HighMargin1">Array of 6 bytes - high deadband values</param>
            <param name="HighMargin2">Array of 6 bytes - highest values</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAnalogInput(System.Byte,System.Int32@)">
            <summary>
            Read analog input value - full scale
            </summary>
            <param name="pinID">Pin ID (40 to 46 on PoKeys56 devices, 42 to 46 on PoKeys55 devices)</param>
            <param name="inputValue">10-bit or 12-bit analog input value</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAnalogValueMax">
            <summary>
            Returns the maximum value of analog input
            </summary>
            <returns>1024 for 10-bit inputs or 4096 for 12-bit inputs</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllAnalogInputs(System.Int32[]@)">
            <summary>
            Read all analog inputs in one command
            </summary>
            <param name="values">Array of 7 32-bit integers - first value is analog input value on pin 41 (PoKeys56 only), the last is analog input value on pin 47</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAnalogInput(System.Byte,System.Byte@)">
            <summary>
            Read analog input value - 8-bit
            </summary>
            <param name="pinID">Pin ID (40 to 46 on PoKeys56 devices, 42 to 46 on PoKeys55 devices)</param>
            <param name="inputValue">8-bit analog input value</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAnalogRCFilterValue(System.UInt32@)">
            <summary>
            Read analog RC filter value
            </summary>
            <param name="filter">Unsigned 32-bit filter value</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAnalogRCFilterValue(System.UInt32)">
            <summary>
            Set analog RC filter value
            </summary>
            <param name="filter">Unsigned 32-bit filter value</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAnalogOutputValue(System.Byte,System.Byte)">
            <summary>
            Set analog output value (only on PoKeys55 devices) - 8-bit value
            </summary>
            <param name="pinID">Pin ID 42</param>
            <param name="value">8-bit value</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAnalogOutputValue(System.Byte,System.Int32)">
            <summary>
            Set analog output value (only on PoKeys55 devices) - 10-bit value
            </summary>
            <param name="pinID">Pin ID 42</param>
            <param name="value">10-bit value</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.BlockGetInput1(System.Boolean[]@)">
            <summary>
            Read block of inputs (1 to 32)
            </summary>
            <param name="inputState">Array of 32 booleans containing current states of inputs 1-32</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.BlockGetInput2(System.Boolean[]@)">
            <summary>
            Read block of inputs (33 to 55)
            </summary>
            <param name="inputState">Array of 23 booleans containing current states of inputs 33-55</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.BlockGetInputAll55(System.Boolean[]@)">
            <summary>
            Read block of inputs (1 to 55)
            </summary>
            <param name="inputState">Array of 55 booleans containing current states of inputs 1-55</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.BlockSetOutput1(System.Boolean[]@)">
            <summary>
            Set block of outputs (1 to 32) - only pins configured as digital outputs are affected by this command
            </summary>
            <param name="outputState">Array of 32 booleans</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.BlockSetOutput2(System.Boolean[]@)">
            <summary>
            Set block of outputs (33 to 55) - only pins configured as digital outputs are affected by this command
            </summary>
            <param name="outputState">Array of 23 booleans</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.BlockSetOutputAll55(System.Boolean[]@)">
            <summary>
            Set block of outputs (1 to 55) - only pins configured as digital outputs are affected by this command
            </summary>
            <param name="outputState">Array of 55 booleans</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.BlockGetAnalogInput8bit(System.Byte[]@,System.Byte[]@)">
            <summary>
            Read block of analog inputs - OBSOLETE FUNCTION (use the function <see cref="M:PoKeysDevice_DLL.PoKeysDevice.GetAllAnalogInputs(System.Int32[]@)"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.BlockGetAnalogInput10bit(System.Byte[]@,System.Int32[]@)">
            <summary>
            Read block of analog inputs - OBSOLETE FUNCTION (use the function <see cref="M:PoKeysDevice_DLL.PoKeysDevice.GetAllAnalogInputs(System.Int32[]@)"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroCreate(System.Byte,System.Byte@)">
            <summary>
            Reserve space for a new macro and return new macro ID
            </summary>
            <param name="length">Length of macro</param>
            <param name="newMacroID">New Macro ID (0 to 63), returned by the device</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroCreate(System.Byte)">
            <summary>
            Only reserve space for a new macro
            </summary>
            <param name="length">Length of macro</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroModifyLength(System.Byte,System.Byte)">
            <summary>
            Modify length of a macro
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="newlength">New macro length</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroDelete(System.Byte)">
            <summary>
            Delete a specific macro
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroSaveConfiguration">
            <summary>
            Save configuration of macros
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroSetName(System.Byte,System.String)">
            <summary>
            Set macro name
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="newname">7 characters for macro name</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroSetKey(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set key mapping for a macro at the specified position
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="index">Position in macro</param>
            <param name="keyCode">USB HID key code</param>
            <param name="keyModifier">USB HID key modifier</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroGetLength(System.Byte,System.Byte@)">
            <summary>
            Read macro length
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="length">Macro length, returned by the device</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroGetName(System.Byte,System.String@)">
            <summary>
            Read macro name - OBSOLETE - use <see cref="M:PoKeysDevice_DLL.PoKeysDevice.GetMacroName(System.Byte,System.String@)"/> 
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="macroName">Macro name, returned by the device</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroGetKey(System.Byte,System.Byte,System.Byte@,System.Byte@)">
            <summary>
            Read key mapping for a macro at the specified position - OBSOLETE - use <see cref="M:PoKeysDevice_DLL.PoKeysDevice.GetMacroKeys(System.Byte,System.Byte[]@,System.Byte[]@)"/>
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="index">Position in macro</param>
            <param name="keyCode">USB HID key code</param>
            <param name="keyModifier">USB HID key modifier</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroGetFreeSpace(System.Int32@)">
            <summary>
            Get free space for macros
            </summary>
            <param name="freeSpace">Free space left for macros</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MacroGetActiveMacros(System.Boolean[]@)">
            <summary>
            Read the macro activation status
            </summary>
            <param name="activeMacros">Array of 64 booleans</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetMacroName(System.Byte,System.String@)">
            <summary>
            Read macro name
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="macroName">Macro name, returned by the device</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetMacroName(System.Byte,System.String)">
            <summary>
            Set macro name
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="macroName">New macro name</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetMacroKeys(System.Byte,System.Byte[]@,System.Byte[]@)">
            <summary>
            Read key mapping for a macro
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="keys">Array of 256 bytes - USB HID key codes</param>
            <param name="modifiers">Array of 256 bytes - USB HID key modifiers</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetMacroKeys(System.Byte,System.Byte,System.Byte[],System.Byte[])">
            <summary>
            Set key mapping for a macro
            </summary>
            <param name="macroID">Macro ID (0 to 63)</param>
            <param name="length">Macro length</param>
            <param name="keys">Array of 256 bytes - USB HID key codes</param>
            <param name="modifiers">Array of 256 bytes - USB HID key modifiers</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDebugValue(System.Byte,System.Int32@)">
            <summary>
            
            </summary>
            <param name="valueIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDebugValueEx(System.Byte,System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="valueIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetLastError">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetFullDeviceReport(System.Byte[]@,System.Byte[]@)">
            <summary>
            Set and read full device report
            </summary>
            <param name="FullReportOut">Array of 56 bytes with the following meaning
            <para>- bytes   0-3: output data (1-32)</para>
            <para>- bytes   4-6: output data (33-55)</para>
            <para>- byte      7: analog output MSB</para>
            <para>- byte      8: analog output LSB</para> 
            </param>
            <param name="FullReportIn">Array of 56 bytes with the following meaning
            <para>- bytes   0-3: input status (1-32)</para>
            <para>- bytes   4-6: input status (33-55)</para>
            <para>- bytes  7-16: analog 1-5 (MSB+LSB for each input)</para>
            <para>- bytes 17-41: 25x 8-bit encoder RAW values </para>
            <para>- bytes 42-49: matrix keyboard status (each byte is bit-mapped to a matrix keyboard row) </para>
            <para>- bytes 50-53: ultra fast encoder RAW value</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetFullDeviceReportIn(System.Byte[]@)">
            <summary>
            Only read full device report
            </summary>
            <param name="FullReportIn">
            <para>- bytes   0-3: input status (1-32)</para>
            <para>- bytes   4-6: input status (33-55)</para>
            <para>- bytes  7-16: analog 1-5 (MSB+LSB for each input)</para>
            <para>- bytes 17-41: 25x 8-bit encoder RAW values </para>
            <para>- bytes 42-49: matrix keyboard status (each byte is bit-mapped to a matrix keyboard row) </para>
            <para>- bytes 50-53: ultra fast encoder RAW value</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllPinConfiguration(System.Byte[]@)">
            <summary>
            Read pin configuration for all pins
            </summary>
            <param name="pinConfiguration">Array of 55 bytes (for details, see SetPinData function)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllPinConfiguration(System.Byte[]@,System.Byte[]@)">
            <summary>
            Read pin configuration for all pins with digital counter options
            </summary>
            <param name="pinConfiguration">Array of 55 bytes (for details, see SetPinData function)</param>
            <param name="additionalPinOptions">Array of 55 bytes (for details, see SetPinData function)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllPinKeyMapping(System.Byte[]@)">
            <summary>
            Read pin key mapping for all pins
            </summary>
            <param name="pinMapping">Array of 55 bytes (only mapping types)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllPinKeyCodes(System.Byte[]@)">
            <summary>
            Read pin key codes for all pins
            </summary>
            <param name="pinKeyCodes">Array of 55 bytes (only USB HID key codes)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllPinKeyModifierss(System.Byte[]@)">
            <summary>
            Read pin key modifiers for all pins
            </summary>
            <param name="pinKeyModifers">Array of 55 bytes (only USB HID key modifiers)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllPinConfiguration(System.Byte[]@)">
            <summary>
            Set pin configuration for all pins
            </summary>
            <param name="pinConfiguration">Array of 55 bytes (for details, see SetPinData function)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllPinConfiguration(System.Byte[]@,System.Byte[]@)">
            <summary>
            Set pin configuration for all pins with digital counter options
            </summary>
            <param name="pinConfiguration">Array of 55 bytes (for details, see SetPinData function)</param>
            <param name="additionalPinOptions">Array of 55 bytes (for details, see SetPinData function)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllPinKeyMapping(System.Byte[]@)">
            <summary>
            Set pin key mapping for all pins
            </summary>
            <param name="pinMapping">Array of 55 bytes (only mapping types)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllPinKeyCodes(System.Byte[]@)">
            <summary>
            Set pin key codes for all pins
            </summary>
            <param name="pinKeyCodes">Array of 55 bytes (only USB HID key codes)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllPinKeyModifierss(System.Byte[]@)">
            <summary>
            Set pin key modifiers for all pins
            </summary>
            <param name="pinKeyModifers">Array of 55 bytes (only USB HID key modifiers)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllEncoderOptions(System.Byte[]@)">
            <summary>
            Read encoder options for all encoders (for values, see <see cref="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoderSettings(System.Byte,System.Byte@,System.Byte@,System.Byte@)"/>)
            </summary>
            <param name="encoderOptions">Array of 25 bytes - encoder options</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllEncoderChannelPinMappings(System.Byte[]@,System.Byte[]@)">
            <summary>
            Get encoder pin mapping for all encoders
            </summary>
            <param name="channelApins">Array of 25 bytes - channel A pin codes (0-based)</param>
            <param name="channelBpins">Array of 25 bytes - channel B pin codes (0-based)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllEncoderKeyMappingsDirA(System.Byte[]@,System.Byte[]@)">
            <summary>
            Get encoder pin codes and modifiers for all encoders for direction A
            </summary>
            <param name="keyCodes">Array of 25 bytes - USB HID key codes</param>
            <param name="keyModifiers">Array of 25 bytes - USB HID key modifiers</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllEncoderKeyMappingsDirB(System.Byte[]@,System.Byte[]@)">
            <summary>
            Get encoder pin codes and modifiers for all encoders for direction B
            </summary>
            <param name="keyCodes">Array of 25 bytes - USB HID key codes</param>
            <param name="keyModifiers">Array of 25 bytes - USB HID key modifiers</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllEncoderOptions(System.Byte[]@)">
            <summary>
            Set encoder options for all encoders (for values, see <see cref="M:PoKeysDevice_DLL.PoKeysDevice.GetEncoderSettings(System.Byte,System.Byte@,System.Byte@,System.Byte@)"/>)
            </summary>
            <param name="encoderOptions">Array of 25 bytes - encoder options</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllEncoderChannelPinMappings(System.Byte[]@,System.Byte[]@)">
            <summary>
            Set encoder pin mapping for all encoders
            </summary>
            <param name="channelApins">Array of 25 bytes - channel A pin codes (0-based)</param>
            <param name="channelBpins">Array of 25 bytes - channel B pin codes (0-based)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllEncoderKeyMappingsDirA(System.Byte[]@,System.Byte[]@)">
            <summary>
            Set encoder pin codes and modifiers for all encoders for direction A
            </summary>
            <param name="keyCodes">Array of 25 bytes - USB HID key codes</param>
            <param name="keyModifiers">Array of 25 bytes - USB HID key modifiers</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetAllEncoderKeyMappingsDirB(System.Byte[]@,System.Byte[]@)">
            <summary>
            Get encoder pin codes and modifiers for all encoders for direction B
            </summary>
            <param name="keyCodes">Array of 25 bytes - USB HID key codes</param>
            <param name="keyModifiers">Array of 25 bytes - USB HID key modifiers</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkConfiguration(System.Byte@,System.Byte[]@,System.Byte[]@)">
            <summary>
             Retrieves current network configuration
            </summary>
            <param name="DHCPenabled">Returns 1 if DHCP is enabled</param>
            <param name="IPAddress">Return 4 bytes of IP address (fixed setting)</param>
            <param name="currentIPaddress">Returns 4 bytes of current IP address</param>
            <returns>False if an error occured</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetNetworkConfiguration(System.Byte@,System.Byte[]@)">
            <summary>
             Sets current network configuration
            </summary>
            <param name="DHCPenabled">Set to 1 if DHCP is enabled</param>
            <param name="IPAddress">4 bytes of IP address (fixed setting)</param>
            <returns>False if an error occured</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkConfiguration2(System.Byte@,System.Byte[]@,System.Byte[]@,System.UInt16@)">
            <summary>
             Retrieves current network configuration
            </summary>
            <param name="DHCPenabled">Returns 1 if DHCP is enabled</param>
            <param name="IPAddress">Return 4 bytes of IP address (fixed setting)</param>
            <param name="currentIPaddress">Returns 4 bytes of current IP address</param>
            <param name="TCPTimeout">TCP timeout value</param>
            <returns>False if an error occured</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkConfiguration2(System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.UInt16@)">
            <summary>
             Retrieves current network configuration
            </summary>
            <param name="DHCPenabled">Returns 1 if DHCP is enabled</param>
            <param name="IPAddress">Return 4 bytes of IP address (fixed setting)</param>
            <param name="currentIPaddress">Returns 4 bytes of current IP address</param>
            <param name="netmask">Returns 4 bytes of subnet mask</param>
            <param name="gatewayIP">Returns 4 bytes of gateway IP</param>
            <param name="TCPTimeout">TCP timeout value</param>
            <returns>False if an error occured</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetNetworkConfiguration2a(System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.UInt16@,System.Byte@)">
            <summary>
             Retrieves current network configuration
            </summary>
            <param name="DHCPenabled">Returns 1 if DHCP is enabled</param>
            <param name="IPAddress">Return 4 bytes of IP address (fixed setting)</param>
            <param name="currentIPaddress">Returns 4 bytes of current IP address</param>
            <param name="netmask">Returns 4 bytes of subnet mask</param>
            <param name="gatewayIP">Returns 4 bytes of gateway IP</param>
            <param name="TCPTimeout">TCP timeout value</param>
            <param name="additionalOptions">Additional options: bit encoded - see protocol specifications</param>
            <returns>False if an error occured</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetNetworkConfiguration2(System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.UInt16@)">
            <summary>
             Sets current network configuration
            </summary>
            <param name="DHCPenabled">Set to 1 if DHCP is enabled</param>
            <param name="IPAddress">4 bytes of IP address (fixed setting)</param>
            <param name="TCPTimeout">TCP timeout value</param>
            <returns>False if an error occured</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetNetworkConfiguration2a(System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.UInt16@,System.Byte@)">
            <summary>
             Sets current network configuration
            </summary>
            <param name="DHCPenabled">Set to 1 if DHCP is enabled</param>
            <param name="IPAddress">4 bytes of IP address (fixed setting)</param>
            <param name="netmask">Subnet mask</param>
            <param name="gatewayIP">Gateway IP address</param>
            <param name="TCPTimeout">TCP timeout value</param>
            <param name="additionalOptions">Additional options - see protocol specifications</param>
            <returns>False if an error occured</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetNetworkConfiguration2(System.Byte@,System.Byte[]@,System.UInt16@)">
            <summary>
             Sets current network configuration
            </summary>
            <param name="DHCPenabled">Set to 1 if DHCP is enabled</param>
            <param name="IPAddress">4 bytes of IP address (fixed setting)</param>
            <param name="TCPTimeout">TCP timeout value</param>
            <returns>False if an error occured</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetModbusSettings(System.UInt16@,System.UInt16@,System.UInt32@,System.UInt32@)">
            <summary>
            Retrieves modbus settings
            </summary>
            <param name="ModbusPort">Modbus port number</param>
            <param name="ModbusTimeout">Modbus connection timeout (in x100ms)</param>
            <param name="ModbusReadAccess">Read access bits (see <see cref="T:PoKeysDevice_DLL.eModbusAccess"/>)</param>
            <param name="ModbusWriteAccess">Write access bits (see <see cref="T:PoKeysDevice_DLL.eModbusAccess"/>)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetModbusSettings(System.UInt16@,System.UInt16@,System.UInt32@,System.UInt32@)">
            <summary>
            Set modbus settings
            </summary>
            <param name="ModbusPort">Modbus port number</param>
            <param name="ModbusTimeout">Modbus connection timeout (in x100ms)</param>
            <param name="ModbusReadAccess">Read access bits (see <see cref="T:PoKeysDevice_DLL.eModbusAccess"/>)</param>
            <param name="ModbusWriteAccess">Write access bits (see <see cref="T:PoKeysDevice_DLL.eModbusAccess"/>)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetMatrixKeyboardKeyStatus(System.Boolean[]@)">
            <summary>
            Read matrix keyboard status
            </summary>
            <param name="status">Array of 128 booleans - statuses of each key</param>
            <returns></returns>
            <example>The following example reads statuses for a 4x4 matrix keyboard connected to the first 4 rows and columns
            <code>
            bool[] KeyStates = new bool[128];
            
            MyDevice.GetMatrixKeyboardKeyStatus(ref KeyStates);
            
            string status = "";
            for (int row = 0; row &lt; 4; row++)
            {
                for (int col = 0; col &lt; 4; col++)
                {
                    status += KeyStates[row * 8 + col] ? "1 " : "0 ";
                }
                status += "\n";
            }
            
            MessageBox.Show("Key statuses:\n" + status);
            </code>
            </example>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetMatrixKeyboardConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Read matrix keyboard configuration
            </summary>
            <param name="configuration">1 to enable matrix keyboard</param>
            <param name="width">Number of columns</param>
            <param name="height">Number of rows</param>
            <param name="row_pins">Array of 16 row pins (pins must be configured as digital outputs)</param>
            <param name="column_pins">Array of 8 column pins (pins must be configured as digital inputs)</param>
            <param name="macro_mapping">Array of 128 booleans</param>
            <param name="keycodes">Array of 128 bytes of key codes</param>
            <param name="keymodifiers">Array of 128 bytes of key modifiers</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Set matrix keyboard configuration
            </summary>
            <param name="configuration">1 to enable matrix keyboard</param>
            <param name="width">Number of columns</param>
            <param name="height">Number of rows</param>
            <param name="row_pins">Array of 16 row pins (pins must be configured as digital outputs)</param>
            <param name="column_pins">Array of 8 column pins (pins must be configured as digital inputs)</param>
            <param name="macro_mapping">Array of 128 booleans</param>
            <param name="keycodes">Array of 128 bytes of key codes</param>
            <param name="keymodifiers">Array of 128 bytes of key modifiers</param>
            <returns></returns>        
            <example>The following example sets up matrix keyboard on pins 1 to 8 (first 4 used for columns, last 4 for rows)
            <code>
                byte[] rows = new byte[16]; // This must always be the size of 16
                byte[] cols = new byte[8];  // This must always be the size of 8
            
                bool[] macros = new bool[128];       // This must always be the size of 128
                byte[] keys = new byte[128];         // This must always be the size of 128
                byte[] modifiers = new byte[128];    // This must always be the size of 128
            
                for (int i=0; i &lt; 4; i++)
                {
                    cols[i] = (byte)i;
                    rows[i] = (byte)(i + 4);
                }
            
                byte configuration = 1;
                byte numrows = 4;
                byte numcols = 4;
            
                // Set column pins as digital inputs
                MyDevice.SetPinData(0, 1 &lt;&lt; 1);
                MyDevice.SetPinData(1, 1 &lt;&lt; 1);
                MyDevice.SetPinData(2, 1 &lt;&lt; 1);
                MyDevice.SetPinData(3, 1 &lt;&lt; 1);
            
                // Set row pins as digital outputs
                MyDevice.SetPinData(4, 1 &lt;&lt; 2);
                MyDevice.SetPinData(5, 1 &lt;&lt; 2);
                MyDevice.SetPinData(6, 1 &lt;&lt; 2);
                MyDevice.SetPinData(7, 1 &lt;&lt; 2);
            
                MyDevice.SetMatrixKeyboardConfiguration(ref configuration, ref numcols, ref numrows, ref rows, ref cols, ref macros, ref keys, ref modifiers);
            </code>
            </example>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetMatrixKeyboardConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration_TriggerSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration_AlternateFunctionSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetMatrixKeyboardConfiguration_TriggerSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Read matrix keyboard configuration (for triggered mapping)
            </summary>
            <param name="configuration">1 to enable matrix keyboard</param>
            <param name="width">Number of columns</param>
            <param name="height">Number of rows</param>
            <param name="row_pins">Array of 16 row pins (pins must be configured as digital outputs)</param>
            <param name="column_pins">Array of 8 column pins (pins must be configured as digital inputs)</param>
            <param name="macro_mapping">Array of 128 booleans</param>
            <param name="keycodesDown">Array of 128 bytes of key codes (for 'Key down' event)</param>
            <param name="keymodifiersDown">Array of 128 bytes of key modifiers (for 'Key down' event)</param>
            <param name="triggeredKey">Array of 128 booleans - true if key supports triggering</param>
            <param name="keycodesUp">Array of 128 bytes of key codes (for 'Key up' event)</param>
            <param name="keymodifiersUp">Array of 128 bytes of key modifiers (for 'Key up' event)</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration_TriggerSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration_TriggerSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Set matrix keyboard configuration (for triggered mapping)
            </summary>
            <param name="configuration">1 to enable matrix keyboard</param>
            <param name="width">Number of columns</param>
            <param name="height">Number of rows</param>
            <param name="row_pins">Array of 16 row pins (pins must be configured as digital outputs)</param>
            <param name="column_pins">Array of 8 column pins (pins must be configured as digital inputs)</param>
            <param name="macro_mapping">Array of 128 booleans</param>
            <param name="keycodesDown">Array of 128 bytes of key codes (for 'Key down' event)</param>
            <param name="keymodifiersDown">Array of 128 bytes of key modifiers (for 'Key down' event)</param>
            <param name="triggeredKey">Array of 128 booleans - true if key supports triggering</param>
            <param name="keycodesUp">Array of 128 bytes of key codes (for 'Key up' event)</param>
            <param name="keymodifiersUp">Array of 128 bytes of key modifiers (for 'Key up' event)</param>
            <returns></returns>  
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetMatrixKeyboardConfiguration_TriggerSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@,System.Boolean[]@,System.Byte[]@,System.Byte[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetMatrixKeyboardConfiguration_AlternateFunctionSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Read matrix keyboard configuration (for alternate functions mapping)
            </summary>
            <param name="configuration">1 to enable matrix keyboard</param>
            <param name="alternateFunction">Pin ID of an Fn+ key (1-based)</param>
            <param name="width">Number of columns</param>
            <param name="height">Number of rows</param>
            <param name="row_pins">Array of 16 row pins (pins must be configured as digital outputs)</param>
            <param name="column_pins">Array of 8 column pins (pins must be configured as digital inputs)</param>
            <param name="keycodes1">Array of 128 bytes of key codes (for normal keys)</param>
            <param name="keymodifiers1">Array of 128 bytes of key modifiers (for normal keys)</param>
            <param name="keycodes2">Array of 128 bytes of key codes (for Fn+ keys)</param>
            <param name="keymodifiers2">Array of 128 bytes of key modifiers (for Fn+ keys)</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration_AlternateFunctionSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetMatrixKeyboardConfiguration_AlternateFunctionSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Set matrix keyboard configuration (for alternate functions mapping)
            </summary>
            <param name="configuration">1 to enable matrix keyboard</param>
            <param name="alternateFunction">Pin ID of an Fn+ key (1-based)</param>
            <param name="width">Number of columns</param>
            <param name="height">Number of rows</param>
            <param name="row_pins">Array of 16 row pins (pins must be configured as digital outputs)</param>
            <param name="column_pins">Array of 8 column pins (pins must be configured as digital inputs)</param>
            <param name="keycodes1">Array of 128 bytes of key codes (for normal keys)</param>
            <param name="keymodifiers1">Array of 128 bytes of key modifiers (for normal keys)</param>
            <param name="keycodes2">Array of 128 bytes of key codes (for Fn+ keys)</param>
            <param name="keymodifiers2">Array of 128 bytes of key modifiers (for Fn+ keys)</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetMatrixKeyboardConfiguration_AlternateFunctionSupport(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)">
             <summary>
             Set PWM outputs
             </summary>
             <param name="channels">Array of 6 booleans - True to activate channel (channel 5 = pin 17... channel 0 = pin 22)</param>
             <param name="period">32-bit unsigned integer - PWM period as a maximum value of system timer</param>
             <param name="duty_values">Array of 6 32-bit unsigned integers - duty cycle timer value</param>
             <returns></returns>
             <example>This example sets up PWM channel 5 on pin 17 to a PWM signal with period od 20 ms and duty cycle of 7.5% (1.5ms)
             <code>
                bool[] channel = new bool[6];
                uint[] duty = new uint[6];
            
                // PWM base clock is 12 MHz (or 25 MHz on PoKeys56 devices), so 1 ms takes 12000 (25000) cycles
                float ms = MyDevice.GetPWMFrequency() / 1000;
                uint period = (uint)(ms * 20);   // 20 ms period
            
                channel[5] = true; // Pin 17 = channel 5 (Pin 18 = channel 4, ...)
                duty[5] = (uint)(ms * 1.5); // Set duty cycle to 1.5 ms (7.5 %)
            
                MyDevice.SetPWMOutputs(ref channel, ref period, ref duty);
             </code>
             </example>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)"/>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMFrequency"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPWMOutputs(System.Boolean[]@,System.Int32@,System.Int32[]@)">
            <summary>
            Set PWM outputs block - see the manual, the order of channels is reversed
            </summary>
            <param name="channels">An array of 6 boolean values - enabled channels</param>
            <param name="period">PWM signal period</param>
            <param name="duty_values">An array of 6 integers, holding the duty cycle values for each channel</param>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMFrequency"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)"/>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetPWMOutputsFast(System.UInt32[]@)">
            <summary>
            Set only PWM outputs duty cycles and leave period untouched. SetPWMOutputs must be called first to initialize the period.
            </summary>
            <param name="duty_values">Array of 6 32-bit unsigned integers - duty cycle timer value</param>
            <returns></returns>     
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMFrequency"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)">
            <summary>
            Read PWM outputs status
            </summary>
            <param name="channels">Array of 6 booleans - True to activate channel (channel 5 = pin 17... channel 0 = pin 22)</param>
            <param name="period">32-bit unsigned integer - PWM period as a maximum value of system timer</param>
            <param name="duty_values">Array of 6 32-bit unsigned integers - duty cycle timer value</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMFrequency"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMFrequency">
            <summary>
            Read PWM sytem timer frequency
            </summary>
            <returns>12e6 for PoKeys55, 25e6 for PoKeys56</returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetPWMOutputs(System.Boolean[]@,System.UInt32@,System.UInt32[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDSetSettings(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set LCD module settings
            </summary>
            <param name="option">Option byte as described in manual - set to 1 for primary pins, 2 for secondary pins, 0 for disabled</param>
            <param name="rows">Number of rows of the LCD display</param>
            <param name="cols">Number of columns of the LCD display</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDSetMode(System.Byte)">
            <summary>
            Set LCD display mode
            </summary>
            <param name="mode">0 - direct mode, 1 - buffered mode (faster)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDGetSettings(System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Read LCD module settings
            </summary>
            <param name="option">Option byte as described in manual - set to 1 for primary pins, 2 for secondary pins, 0 for disabled</param>
            <param name="rows">Number of rows of the LCD display</param>
            <param name="cols">Number of columns of the LCD display</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDInit">
            <summary>
            Initialize LCD display
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDClear">
            <summary>
            Clear LCD display
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDGotoXY(System.Byte,System.Byte)">
            <summary>
            Move cursor to a specified position in the display
            </summary>
            <param name="x">x position of the cursor (0-based)</param>
            <param name="y">y position of the cursor (0-based)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDPrint(System.String)">
            <summary>
            Print a string on the LCD display
            </summary>
            <param name="LCDText">String to print</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDPutc(System.Char)">
            <summary>
            Put a single character on LCD display
            </summary>
            <param name="character">LCD display character code</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDSetEntryMode(System.Byte,System.Byte)">
            <summary>
            Set entry mode for LCD
            </summary>
            <param name="CursorMoveDirection">1 for incrementing address, 0 for decrementing address</param>
            <param name="DisplayShift">1 for display shift enabled</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDDisplayOnOffControl(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set LCD display on/off status
            </summary>
            <param name="DisplayOnOff">1 for display on</param>
            <param name="CursorOnOff">1 for cursor on</param>
            <param name="CursorBlinkingOnOff">1 for display blinking on</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.LCDDefineCustomCharacter(System.Byte,System.Byte[])">
            <summary>
            Define a custom character in the LCD display memory
            </summary>
            <param name="CharacterCode">Custom character code (0 to 7)</param>
            <param name="characterData">Array of 8-bytes containing bit encoded custom character</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLEDSetSettings(System.Boolean,System.Byte,System.Byte,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Set matrix LED settings
            </summary>
            <param name="enabled1">1 if matrix LED 1 is enabled</param>
            <param name="rows1">Number of rows of matrix LED 1</param>
            <param name="cols1">Number of columns of matrix LED 1</param>
            <param name="enabled2">1 if matrix LED 2 is enabled</param>
            <param name="rows2">Number of rows of matrix LED 2</param>
            <param name="cols2">Number of columns of matrix LED 2</param>
            <returns></returns>
            <example>The following example enables matrix LED 1 and draws a simple graphic on the display
            <code>
                        // Enable LED1
                        MyDevice.MatrixLEDSetSettings(true, 8, 8, false, 8, 8);
            
                        // Invert the whole matrix
                        MyDevice.MatrixLED1ClearAll(true);
            
                        // Draw a dark + sign
                        MyDevice.MatrixLED1SetPixel(2, 1, false);
                        MyDevice.MatrixLED1SetPixel(1, 1, false);
                        MyDevice.MatrixLED1SetPixel(0, 1, false);
                        MyDevice.MatrixLED1SetPixel(1, 0, false);
                        MyDevice.MatrixLED1SetPixel(1, 2, false);
                    *
            </code>
            </example>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLEDGetSettings(System.Boolean@,System.Byte@,System.Byte@,System.Boolean@,System.Byte@,System.Byte@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED1Update(System.Byte[])"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED1ClearAll(System.Boolean)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED1SetPixel(System.Byte,System.Byte,System.Boolean)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED2Update(System.Byte[])"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED2ClearAll(System.Boolean)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED2SetPixel(System.Byte,System.Byte,System.Boolean)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLEDGetSettings(System.Boolean@,System.Byte@,System.Byte@,System.Boolean@,System.Byte@,System.Byte@)">
            <summary>
            Get matrix LED settings
            </summary>
            <param name="enabled1">1 if matrix LED 1 is enabled</param>
            <param name="rows1">Number of rows of matrix LED 1</param>
            <param name="cols1">Number of columns of matrix LED 1</param>
            <param name="enabled2">1 if matrix LED 2 is enabled</param>
            <param name="rows2">Number of rows of matrix LED 2</param>
            <param name="cols2">Number of columns of matrix LED 2</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED1Update(System.Byte[])">
            <summary>
            Matrix LED 1 update
            </summary>
            <param name="data">Array of 8 bytes that contain bit encoded matrix LED 1 status</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED1ClearAll(System.Boolean)">
            <summary>
            Clear matrix LED 1
            </summary>
            <param name="invert">Set to 1 if matrix LED 1 is inverted</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED1SetPixel(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Set pixel on matrix LED 1
            </summary>
            <param name="row">Row index (0-based)</param>
            <param name="column">Column index (0-based)</param>
            <param name="value">Bit value (true / false)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED2Update(System.Byte[])">
            <summary>
            Matrix LED 2 update
            </summary>
            <param name="data">Array of 8 bytes that contain bit encoded matrix LED 2 status</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED2ClearAll(System.Boolean)">
            <summary>
            Clear matrix LED 2
            </summary>
            <param name="invert">Set to 1 if matrix LED 2 is inverted</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.MatrixLED2SetPixel(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Set pixel on matrix LED 2
            </summary>
            <param name="row">Row index (0-based)</param>
            <param name="column">Column index (0-based)</param>
            <param name="value">Bit value (true / false)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.AuxilaryBusSetData(System.Byte,System.Byte[])">
            <summary>
            Set ExtBus data
            </summary>
            <param name="auxilaryBusEnabled">1 enables the ExtBus</param>
            <param name="dataBytes">Array of 10 bytes containing bit encoded output data</param>
            <returns></returns>
            <example>This example outputs data on PoExtBus to the first device (devices are ordered in reverse)
            <code>
            byte[] dataOut = new byte[10];
            
            // Set some value
            dataOut[9] = 0xAA;
            
            MyDevice.AuxilaryBusSetData(1, dataOut);
            </code>
            </example>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.AuxilaryBusSetData(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Set ExtBus data
            </summary>
            <param name="auxilaryBusEnabled">1 enables the ExtBus</param>
            <param name="auxilaryBusConnection">0 for default connection option (dedicated connector on PoKeys56)</param>
            <param name="dataBytes">Array of 10 bytes containing bit encoded output data</param>
            <returns></returns>
            <example>This example outputs data on PoExtBus to the first device (devices are ordered in reverse)
            <code>
            byte[] dataOut = new byte[10];
            
            // Set some value
            dataOut[9] = 0xAA;
            
            MyDevice.AuxilaryBusSetData(1, 0, dataOut);
            </code>
            </example>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.AuxilaryBusGetData(System.Byte@)">
            <summary>
            Read ExtBus status
            </summary>
            <param name="auxilaryBusEnabled">1 if the ExtBus is enabled</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.AuxilaryBusGetData(System.Byte@,System.Byte@)">
            <summary>
            Read ExtBus status
            </summary>
            <param name="auxilaryBusEnabled">1 if the ExtBus is enabled</param>
            <param name="auxilaryBusConnection">0 for default connection option (dedicated connector on PoKeys56)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SPIWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to SPI bus
            </summary>
            <param name="length">Number of bytes to be written</param>
            <param name="data">Array of up to 55 bytes of data to be written</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SPIRead(System.Int32,System.Int32@,System.Byte[]@)">
            <summary>
            Read data from SPI bus
            </summary>
            <param name="status">1 if successfull, 0 unsuccessfull, 0x10 – operation still executing</param>
            <param name="data">Data from SPI bus</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SPIconfigure(System.Byte,System.Byte)">
            <summary>
            Configure SPI bus
            </summary>
            <param name="prescaler">Prescaler value (2-254, even values only)</param>
            <param name="format">bit 0 = CPOL, bit 1 = CPHA</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.UARTconfigure(System.UInt32,System.Byte,System.Int32)">
            <summary>
            Configure UART bus
            </summary>
            <param name="baudrate">Baudrate</param>
            <param name="format">0x83 for 8N1</param>
            <param name="interfaceID">ID of the UART interface (1, 2 or 3)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.UARTWrite(System.Byte[],System.Int32)">
            <summary>
            Writes data to UART bus
            </summary>
            <param name="data">Array of up to 55 bytes of data to be written</param>
            <param name="interfaceID">ID of the UART interface (1, 2 or 3)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.UARTRead(System.Int32)">
            <summary>
            Read data from UART bus
            </summary>
            <param name="interfaceID">ID of the UART interface (1, 2 or 3)</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CSetStatus(System.Boolean)">
            <summary>
            Activates or deactivates the I<sup>2</sup>C bus support on ExtBus
            </summary>
            <param name="activated">True to activate I<sup>2</sup>C</param>
            <returns></returns>
            <example>The example below reads temperature from the LM75 I2C sensor, connected to the PoExtBus connector
            <code>
                        byte stat = 0;
                        byte[] data = new byte[32];
            
                        // Turn off PoExtBus
                        MyDevice.AuxilaryBusSetData(0, data);
            
                        // Activate I2C
                        MyDevice.I2CSetStatus(true);
            
                        // Write 0 to the device (set address)
                        data[0] = 0;
                        MyDevice.I2CStartWrite(0x90, 1, data);
                        MyDevice.I2CGetWriteStatus(ref stat);
            
                        if (stat != 1)
                        {
                            MessageBox.Show("Error writing");
                            return;
                        }
            
                        // Read temperature
                        MyDevice.I2CStartRead(0x90, 2);
                        // This operation was quite fast, so no wait is needed...
                        MyDevice.I2CGetReadStatus(ref stat, ref data);
            
                        if (stat == 1)
                        {
                            MessageBox.Show("Temperature: " + data[0] + "°C");
                        }
                        else
                        {
                            MessageBox.Show("Error reading");
                        }
            
                        // Deactivate I2C
                        MyDevice.I2CSetStatus(false);
                        *
            </code>
            </example>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartBusScan"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartWrite(System.Byte,System.Byte,System.Byte[])"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartRead(System.Byte,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CGetStatus(System.Boolean@)">
            <summary>
            Retrieves I2C bus activation status
            </summary>
            <param name="activated">Returns true if I2C is activated</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartWrite(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Writes data to I2C bus
            </summary>
            <param name="address">Address of I<sup>2</sup>C device (0 to 127)</param>
            <param name="length">Number of bytes to be written</param>
            <param name="data">Array of up to 32 bytes of data to be written</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CGetWriteStatus(System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartWriteAndRead(System.Byte,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Writes and reads data to/from I2C bus
            </summary>
            <param name="address">Address of I<sup>2</sup>C device (0 to 127)</param>
            <param name="lengthWrite">Number of bytes to be written</param>
            <param name="lengthRead">Number of bytes to be read</param>
            <param name="data">Array of up to 32 bytes of data to be written</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CGetWriteStatus(System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CGetWriteStatus(System.Byte@)">
            <summary>
            Read status of writing to I<sup>2</sup>C bus
            </summary>
            <param name="status">1 if successfull, 0 unsuccessfull, 0x10 – operation still executing</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartWrite(System.Byte,System.Byte,System.Byte[])"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartRead(System.Byte,System.Byte)">
            <summary>
            Initiates read from I<sup>2</sup>C device
            </summary>
            <param name="address">Address of I2C device (0 to 127)</param>
            <param name="length">Number of bytes to be read from the device</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CGetReadStatus(System.Byte@,System.Byte[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CGetReadStatus(System.Byte@,System.Byte[]@)">
            <summary>
            Read status of reading from I<sup>2</sup>C bus and retrieve data is successfull
            </summary>
            <param name="status">1 if successfull, 0 unsuccessfull, 0x10 – operation still executing</param>
            <param name="data">Data from I<sup>2</sup>C bus</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartRead(System.Byte,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartBusScan">
            <summary>
            Initiates I<sup>2</sup>C bus scan
            </summary>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CReadBusScanResults(System.Byte@,System.Boolean[]@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.I2CReadBusScanResults(System.Byte@,System.Boolean[]@)">
            <summary>
            Reads results of I<sup>2</sup>C bus scan
            </summary>
            <param name="status">1 if successfull, 0 unsuccessfull, 0x10 – operation still executing</param>
            <param name="devicePresent">Array of 128 booleans with device present statuses</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.I2CStartBusScan"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireSetStatus(System.Boolean)">
            <summary>
            Activate or deactivate 1-wire bus support on pin 55
            </summary>
            <param name="activated">True to activate 1-wire</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireGetStatus(System.Boolean@)">
            <summary>
            Retrieves 1-Wire bus activation status
            </summary>
            <param name="activated">Returns true if 1-wire is activated</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireStartWriteAndRead(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Initiates write and read process to/from 1-wire device
            </summary>
            <param name="WriteCount">Number of bytes to be written</param>
            <param name="ReadCount">Number of bytes to be read</param>
            <param name="data">Up to 16 bytes of data to be written to the device</param>
            <returns></returns>
            <example>The example below reads temperature from Dallas 18B20 1-wire sensor, connected to the pin 55
            <code>
                        byte stat = 0;
                        byte[] data = new byte[16];
                        MyDevice.prot1WireSetStatus(true);
                         
                        data[0] = 0xCC;
                        data[1] = 0x44;
                        MyDevice.prot1WireStartWriteAndRead(2, 0, data);
            
                        Thread.Sleep(1000);
            
                        data[0] = 0xCC;
                        data[1] = 0xBE;
                        MyDevice.prot1WireStartWriteAndRead(2, 9, data);
            
                        Thread.Sleep(10);
            
                        byte len = 0;
                        MyDevice.prot1WireGetReadStatus(ref stat, ref data, ref len);
            
                        if (stat == 1)
                        {
                            MessageBox.Show("Temperature: " + (((data[1] &lt;&lt; 8) + data[0]) &gt;&gt; 4) + "°C");
                        }
                        else
                        {
                            MessageBox.Show("Error reading");
                        }
                         *
            </code>
            </example>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireSetStatus(System.Boolean)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireGetReadStatus(System.Byte@,System.Byte[]@,System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireStartWriteAndRead(System.Byte,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Initiates write and read process to/from 1-wire device
            </summary>
            <param name="pinID">PoKeys pin ID that is used as 1-wire bus</param>
            <param name="WriteCount">Number of bytes to be written</param>
            <param name="ReadCount">Number of bytes to be read</param>
            <param name="data">Up to 16 bytes of data to be written to the device</param>
            <returns></returns>
            <example>The example below reads temperature from Dallas 18B20 1-wire sensor, connected to the pin 55
            <code>
                        byte stat = 0;
                        byte[] data = new byte[16];
                        MyDevice.prot1WireSetStatus(true);
                         
                        data[0] = 0xCC;
                        data[1] = 0x44;
                        MyDevice.prot1WireStartWriteAndRead(54, 2, 0, data);
            
                        Thread.Sleep(1000);
            
                        data[0] = 0xCC;
                        data[1] = 0xBE;
                        MyDevice.prot1WireStartWriteAndRead(54, 2, 9, data);
            
                        Thread.Sleep(10);
            
                        byte len = 0;
                        MyDevice.prot1WireGetReadStatus(ref stat, ref data, ref len);
            
                        if (stat == 1)
                        {
                            MessageBox.Show("Temperature: " + (((data[1] &lt;&lt; 8) + data[0]) &gt;&gt; 4) + "°C");
                        }
                        else
                        {
                            MessageBox.Show("Error reading");
                        }
                         *
            </code>
            </example>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireSetStatus(System.Boolean)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireGetReadStatus(System.Byte@,System.Byte[]@,System.Byte@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireGetReadStatus(System.Byte@,System.Byte[]@,System.Byte@)">
            <summary>
            Read status of write and read command and retrieve data if command was executed
            </summary>
            <param name="status">1 if successfull, 0 unsuccessfull, 0x10 – operation still executing</param>
            <param name="data">Array of 16 bytes of data, read from device</param>
            <param name="DataLength">Number of bytes, read from device</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireStartWriteAndRead(System.Byte,System.Byte,System.Byte[])"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.prot1WireSetStatus(System.Boolean)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1Wire_ScanStart(System.Byte)">
            <summary>
            Execute a scan for 1-wire devices, present on the bus
            </summary>
            <param name="pinID">PoKeys pin ID that is used as 1-wire bus master</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1Wire_ScanStop">
            <summary>
            Stop scan
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1Wire_ScanContinue">
            <summary>
            Continue the scan for next device on the bus
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.prot1Wire_ScanStatusGet(System.Byte@,System.Byte[]@)">
            <summary>
            Check the result of the scan operation. Scan is interrupted after each detected device. Continue or stop operation must then be executed
            </summary>
            <param name="scanResult">0: scan in progress, 1: new device found, 2: no device found, 3: last device found</param>
            <param name="foundROM">If device is found, this field contains 64-bit ROM</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_GetState(System.Byte@)">
            <summary>
            Function returns the internal PoI2C state of the PoKeys device. Look in the protocol specification document under PoI2C settings and communication 
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_AddDeviceStart">
            <summary>
            Starts 'Register device' procedure
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_AddDeviceStop">
            <summary>
            Stops the 'Register device' procedure
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_AddDeviceStatus(System.Byte@)">
            <summary>
            Retrieves the status of 'Register device' procedure
            </summary>
            <param name="status">1 if new device was registered</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_ReinitializePoNET_noClear">
            <summary>
            Unregisters all PoExtBus Pro devices (but keeps the configuration)
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_ReinitializePoNET_wClear">
            <summary>
            Unregisters all PoExtBus Pro devices and clears the configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_GetModuleSettings(System.Byte,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
             Retrieves module settings
             </summary>
             <param name="moduleID">Module ID</param>
             <param name="i2cAddress">I2C address assigned</param>
             <param name="modType">Module type (0x10 for PoEBkb)</param>
             <param name="modSize">Module size</param>
             <param name="modOpt">Module option flags - 
            o	bit 0 - has inputs
            o	bit 1 - has outputs
            o	bit 2 - x-y rotated
            o	bit 3 - light sensor present
            o	bit 4 - device mapped to PoKeys peripheral
            o	bit 5 - configuration retrieved
            o	bit 6 - device configured
            o	bit 7 - device present
            </param>
             <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_SetModuleSettings(System.Byte,System.Byte)">
            <summary>
            Sets the module options
            </summary>
            <param name="moduleID">Module ID</param>
            <param name="opt1"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_CheckForNewDevices(System.Byte@)">
            <summary>
            Checks for new devices
            </summary>
            <param name="newDevice">Returns 1 if unconfigured device is found</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_GetFWversion(System.Byte,System.Byte@)">
            <summary>
            Reads firmware version
            </summary>
            <param name="moduleID"></param>
            <param name="FWversion"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_GetModuleStatus(System.Byte,System.Byte[]@)">
            <summary>
            Reads data from the module
            </summary>
            <param name="moduleID">Module ID</param>
            <param name="status">Array of 16 bytes</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_SetModuleStatus(System.Byte,System.Byte[]@)">
            <summary>
            Writes data to module
            </summary>
            <param name="moduleID">Module ID</param>
            <param name="status">16-byte array of data</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_SetPWM(System.Byte,System.Byte)">
            <summary>
            Sets PWM duty cycle for LED intensity
            </summary>
            <param name="moduleID">Module ID</param>
            <param name="PWMvalue">LED intensity</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_GetLightIntensity(System.Byte,System.Byte@)">
            <summary>
            Reads light intensity using light sensor
            </summary>
            <param name="moduleID">Module ID</param>
            <param name="intensity">Light intensity</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_BootloaderStart(System.Byte)">
            <summary>
            PoNET bootloader command
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_BootloaderStartProgramming">
            <summary>
            PoNET bootloader command
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_BootloaderTransferPart(System.Byte[]@,System.Byte@)">
            <summary>
            PoNET bootloader command
            </summary>
            <param name="firmware_data"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_BootloaderFinish">
            <summary>
            PoNET bootloader command
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_BootloaderExit">
            <summary>
            PoNET bootloader command
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.PoNET_BootloaderActivate">
            <summary>
            PoNET bootloader command
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.RTmodeSetup(System.Byte)">
            <summary>
            Real-time mode setup
            </summary>
            <param name="RTmodeStatus"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.RTmodeSetData(System.Byte[],System.Int32[])">
            <summary>
            Send real-time mode data
            </summary>
            <param name="DigitalOutputs"></param>
            <param name="PWMOutputs"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.RTmodeGetData(System.Byte[]@,System.Int32[]@,System.Int32[]@,System.Int32@)">
            <summary>
            Read real-time mode data
            </summary>
            <param name="DigitalInputs"></param>
            <param name="AnalogInputs"></param>
            <param name="FastEncoders"></param>
            <param name="TickCounter"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetWebSettings(PoKeysDevice_DLL.sPoKeysWebInterface@)">
            <summary>
            Retrieve web interface settings (enable/disable interface, anonymous access, outputs enable) from the device
            </summary>
            <param name="web"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetWebSettings(PoKeysDevice_DLL.sPoKeysWebInterface@)">
            <summary>
            Send web interface settings (enable/disable interface, anonymous access, outputs enable) to device
            </summary>
            <param name="web"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllSensorValuesString">
            <summary>
            PoTLog27 command to retrieve the values of all sensors in one string
            </summary>
            <returns>String containing measurement results for all sensors - measurements are delimited with |</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_GetAllSensorValues(System.IntPtr)">
            <summary>
            Equivalent of GetAllSensorValues, but useses pointers instead of object reference
            </summary>
            <param name="poTLogStruct">Pointer to the sPoTLogDevice structure</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetAllSensorValues(PoKeysDevice_DLL.sPoTLogDevice@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetAllSensorIDs(PoKeysDevice_DLL.sPoTLogDevice@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllSensorValues(PoKeysDevice_DLL.sPoTLogDevice@)">
            <summary>
            PoTLog27 command to retrieve the values of all sensors
            </summary>
            <param name="logDevice">sPoTLogDevice structure that will be filled with measurement results</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_GetAllSensorIDs(System.IntPtr)">
            <summary>
            Equivalent of GetAllSensorIDs, but useses pointers instead of object reference
            </summary>
            <param name="poTLogStruct">Pointer to the sPoTLogDevice structure</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetAllSensorIDs(PoKeysDevice_DLL.sPoTLogDevice@)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetAllSensorValues(PoKeysDevice_DLL.sPoTLogDevice@)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetAllSensorIDs(PoKeysDevice_DLL.sPoTLogDevice@)">
            <summary>
            PoTLog27 command to retrieve 64-bit IDs of all connected sensors
            </summary>
            <param name="logDevice">sPoTLogDevice structure that will be filled with sensor IDs</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetSensorSetup(PoKeysDevice_DLL.sPoKeysSensor@,System.Byte)">
            <summary>
            Retrieve the sensor setup
            </summary>
            <param name="sensor">sPoKeysSensor structure</param>
            <param name="sensorID">sensor ID</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetSensorSetup(PoKeysDevice_DLL.sPoKeysSensor@,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetSensorSetup(PoKeysDevice_DLL.sPoKeysSensor@,System.Byte)">
            <summary>
            Send the sensor setup to device
            </summary>
            <param name="sensor">sPoKeysSensor structure</param>
            <param name="sensorID">sensor ID</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetSensorSetup(PoKeysDevice_DLL.sPoKeysSensor@,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.EasySensorsSetupGet(PoKeysDevice_DLL.sPoKeysEasySensor@,System.Byte)">
            <summary>
            Retrieve the EasySensors setup for single sensor
            </summary>
            <param name="sensor">sPoKeysEasySensor structure</param>
            <param name="sensorID">sensor ID</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.EasySensorsValueGet(PoKeysDevice_DLL.sPoKeysEasySensor@,System.Byte)">
            <summary>
            Retrieve the EasySensors value for single sensor
            </summary>
            <param name="sensor">sPoKeysEasySensor structure</param>
            <param name="sensorID">sensor ID</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.EasySensorsSetupSet(PoKeysDevice_DLL.sPoKeysEasySensor@,System.Byte)">
            <summary>
            Set the EasySensors setup for single sensor
            </summary>
            <param name="sensor">sPoKeysEasySensor structure</param>
            <param name="sensorID">sensor ID</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.EasySensorsSetupGet(PoKeysDevice_DLL.sPoKeysEasySensor[]@,System.Int32,System.Int32)">
            <summary>
            Retrieve the EasySensors setup for multiple sensors
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.EasySensorsValueGet(PoKeysDevice_DLL.sPoKeysEasySensor[]@,System.Int32,System.Int32)">
            <summary>
            Retrieve the EasySensors values for multiple sensors
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_EasySensorValueGet(System.Int32)">
            <summary>
            Retrieve the EasySensors values for multiple sensors
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.EasySensorsSetupSet(PoKeysDevice_DLL.sPoKeysEasySensor[]@,System.Int32,System.Int32)">
            <summary>
            Set the EasySensors setup for multiple sensor
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.CustomUnitGet(PoKeysDevice_DLL.sPoKeysCustomSensorUnit@,System.Byte)">
            <summary>
            Reads the custom unit descriptor from device
            </summary>
            <param name="unit">'Pointer' to unit descriptor structure</param>
            <param name="unitID">Custom unit index</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.CustomUnitSet(PoKeysDevice_DLL.sPoKeysCustomSensorUnit@,System.Byte)">
            <summary>
            Writes the custom unit descriptor to device
            </summary>
            <param name="unit">'Pointer' to unit descriptor structure</param>
            <param name="unitID">Custom unit index</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.CustomUnitGet(PoKeysDevice_DLL.sPoKeysCustomSensorUnit[]@,System.Int32,System.Int32)">
            <summary>
            Reads custom unit descriptors from device
            </summary>
            <param name="unitsList">'Pointer' to array of unit descriptor structures</param>
            <param name="index">Index of first unit to read</param>
            <param name="count">Number of units to read</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.CustomUnitSet(PoKeysDevice_DLL.sPoKeysCustomSensorUnit[]@,System.Int32,System.Int32)">
            <summary>
            Writes custom unit descriptors to device
            </summary>
            <param name="unitsList">'Pointer' to array of unit descriptor structures</param>
            <param name="index">Index of first unit to write</param>
            <param name="count">Number of units to write</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.DashboardItemGet(PoKeysDevice_DLL.sPoKeysDashboardItemEx@,System.Byte)">
            <summary>
            Retrieve the Dashboard item setup
            </summary>
            <param name="dashItem">'Pointer' to sPoKeysDashboardItemEx structure</param>
            <param name="itemID">item index</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.DashboardItemSet(PoKeysDevice_DLL.sPoKeysDashboardItemEx@,System.Byte)">
            <summary>
            Write the Dashboard item setup
            </summary>
            <param name="dashItem">'Pointer' to sPoKeysDashboardItemEx structure</param>
            <param name="itemID">item index</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.DashboardItemGet(PoKeysDevice_DLL.sPoKeysDashboardItemEx[]@,System.Byte,System.Int32)">
            <summary>
            Retrieve the Dashboard item setup for multiple items
            </summary>
            <param name="dashItems">'Pointer' to list of sPoKeysDashboardItemEx structures</param>
            <param name="itemID">item index of first item to retrieve</param>
            <param name="count">number of items to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.DashboardItemSet(PoKeysDevice_DLL.sPoKeysDashboardItemEx[]@,System.Byte,System.Int32)">
            <summary>
            Write the Dashboard item setup for multiple items
            </summary>
            <param name="dashItems">'Pointer' to list of sPoKeysDashboardItemEx structures</param>
            <param name="itemID">item index of first item to write</param>
            <param name="count">number of items to write</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetWebUserData(PoKeysDevice_DLL.sPoKeysWebuser@,System.Byte)">
            <summary>
            Retrieve user name and password for the selected web user account
            </summary>
            <param name="user">sPoKeysWebuser structure</param>
            <param name="userID">user ID (index)</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetWebUserData(PoKeysDevice_DLL.sPoKeysWebuser@,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetWebUserData(PoKeysDevice_DLL.sPoKeysWebuser@,System.Byte)">
            <summary>
            Send user name and password for the selected web user account
            </summary>
            <param name="user">sPoKeysWebuser structure</param>
            <param name="userID">user ID (index)</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetWebUserData(PoKeysDevice_DLL.sPoKeysWebuser@,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetDashboardItem(PoKeysDevice_DLL.sPoKeysDashboardItem@,System.Byte)">
            <summary>
            Retrieve the dashboard item setup
            </summary>
            <param name="dItem">sPoKeysDashboardItem structure</param>
            <param name="itemID">dashboard item index</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.SetDashboardItem(PoKeysDevice_DLL.sPoKeysDashboardItem@,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetDashboardItem(PoKeysDevice_DLL.sPoKeysDashboardItem@,System.Byte)">
            <summary>
            Send the dashboard item setup
            </summary>
            <param name="dItem">sPoKeysDashboardItem structure</param>
            <param name="itemID">dashboard item index</param>
            <returns></returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.GetDashboardItem(PoKeysDevice_DLL.sPoKeysDashboardItem@,System.Byte)"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_ExecuteInner(PoKeysDevice_DLL.sPoKeysDeviceStatus@,PoKeysDevice_DLL.ePoKeysDLLOperations)">
            <summary>
            Function used for more direct communication with PoKeys devices with the C++. See the C++ example application.
            </summary>
            <param name="devStat">Reference to the sPoKeysDeviceStatus structure</param>
            <param name="command">Reference to the ePoKeysDLLOperations structure</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_Execute(System.IntPtr,System.Int32)">
            <summary>
            Function used for more direct communication with PoKeys devices with the C++. See the C++ example application.
            </summary>
            <param name="pkStruct">Pointer to an existing sPoKeysDeviceStatus structure</param>
            <param name="commandCodes">Command code (use enum ePoKeysDLLOperations)</param>
            <seealso cref="T:PoKeysDevice_DLL.sPoKeysDeviceStatus"/>
            <seealso cref="T:PoKeysDevice_DLL.ePoKeysDLLOperations"/>
            <example>The following C++ example uses COM_Execute command for communication
            <code name="C++">
            // Unselect this to connect to USB device
            #define PoKeys_USB
            
            #include "stdafx.h"
            #include &lt;stdio.h&gt;
            
            // Import TLB file - this must be the same version as the DLL
            #import "..\PoKeysDevice_DLL.tlb"  no_namespace
            
            
            int _tmain(int argc, _TCHAR* argv[])
            {
            	BSTR builddate = SysAllocString(L"");
            
            	printf("---------------------------------");
            	printf("\nTesting PoKeys DEMO device - DLL\n");
            	printf("---------------------------------");
            
            	try
            	{
            		// Initialize COM 
            		CoInitialize(NULL);
            
            		long st = 0;
            		unsigned char id = 0;
            
            		// PoKeys device pointer
            		IPoKeysDevicePtr ptr;
            		// Create instance of the device
            		ptr.CreateInstance(__uuidof(PoKeysDevice));
            
            		if (ptr == 0)
            		{
            			printf("\nCOM initialization failed - check if TLB has the same version as the DLL");
            			getchar();
            			return 1;
            		}
            
            		// From here on, PoKeys can simply be used by refering to the ptr
            
            		long i;
            #ifdef PoKeys_USB
            		//Enumerate devices - USB
            		i = ptr-&gt;EnumerateDevices();
            #else
            		// List ethernet devices
            		sPoKeysNetworkDeviceData * netDev = new sPoKeysNetworkDeviceData();
            		ptr-&gt;StartEthernetDiscovery();
            		Sleep(1000);
            		ptr-&gt;StopEthernetDiscovery();
            
            		i = ptr-&gt;GetNumberOfDetectedNetworkDevices();
            #endif		
            
            		if (i &gt; 0)
            		{
            
            #ifdef PoKeys_USB
            			// Connect to the first device - USB
            			ptr-&gt;ConnectToDevice(0);
            #else
            			// Get device data
            			ptr-&gt;COM_GetNetworkDeviceData((int)netDev, (int)0);
            			ptr-&gt;ConnectToNetworkDevice(netDev-&gt;IPAddress);
            #endif
            
            			// Retrieve user ID
            			ptr-&gt;GetUserID(&amp;id);
            			// Retrieve build date
            			ptr-&gt;GetBuildDate(&amp;builddate);
            
            			// This call retrieves the current device status (still under development. Additional entries will be available soon)
            			sPoKeysDeviceStatus * devStat = new sPoKeysDeviceStatus();
            
            			// PoKeys device data structure is filled with the configuration
            			ptr-&gt;COM_Execute((int)devStat, (int)(ePoKeysDLLOperations_GetDeviceData));
            			ptr-&gt;COM_Execute((int)devStat, (int)(ePoKeysDLLOperations_GetPinConfiguration));
            			ptr-&gt;COM_Execute((int)devStat, (int)(ePoKeysDLLOperations_GetPeripheralConfiguration));
            
            
            			// 1000x read inputs and encoders (and measure time that it took to execute)
            			DWORD start = GetTickCount();
            
            			bool result = false;
            			for (int k = 0; k&lt;1000; k++)
            			{
            				result = ptr-&gt;COM_Execute((int)devStat,    (int)(ePoKeysDLLOperations_GetDigitalPinValues) );
            /*												 		|| (int)(ePoKeysDLLOperations_GetEncoderValues)
            												 		|| (int)(ePoKeysDLLOperations_GetAnalogPinValues)
            												 		|| (int)(ePoKeysDLLOperations_GetDigitalCounterValues)); */
            				// devStat-&gt;PoKeysPins[0].DigitalInputValue		- digital input value
            				// devStat-&gt;PoKeysPins[0].AnalogValue			- analog input value
            				// devStat-&gt;PoKeysPins[0].DigitalCounterValue	- digital counter input value
            
            				// devStat-&gt;Encoders[0].encoderValue;		    - encoder value
            
            				// Outputs
            				// devStat-&gt;PoKeysPins[0].DigitalOutputValue	- digital output value
            				// ptr-&gt;COM_Execute((int)devStat, (int)(ePoKeysDLLOperations_SetDigitalPinValues));
            			}
            			DWORD end = GetTickCount();
            
            			ptr-&gt;SetFastEncodersStatus(10);
            
            			// Disconnect from device
            			ptr-&gt;DisconnectDevice();
            
            			// Print data
            			printf("\nUser ID: %d", id);
            			wprintf(L"\nBuild date: %s", builddate);
            			printf("\n1000 calls took %d miliseconds", end-start);
            		} else
            		{
            			printf("\nNo PoKeys devices found!");
            		}
            	}
            	catch( char * str ) {
            		printf("Exception raised: %s", str);
            	}
            
            	// Unitialize COM
            	CoUninitialize();
            
            	printf("\n\nTest complete");
            
            	getchar();
            	return 0;
            }
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_GetNetworkDeviceData(System.IntPtr,System.Int32)">
            <summary>
            Similar as COM_Execute, this command retrieves network device data directly into the structure
            </summary>
            <param name="ptStruct">Pointer to an existing structure sPoKeysNetworkDeviceData</param>
            <param name="deviceIndex">Index of the device to retrieve data (0 to number of detected devices - 1)</param>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.COM_Execute(System.IntPtr,System.Int32)"/>
            <seealso cref="T:PoKeysDevice_DLL.sPoKeysNetworkDeviceData"/>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_PoNET(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Similar as COM_Execute, this command is used to communicate with PoNET devices
            </summary>
            <param name="poebpStruct">Pointer to an existing sPoNETDevice structure</param>
            <param name="commandCodes">Command code (use enum ePoNEToperations)</param>
            <param name="moduleID">PoNET device module ID</param>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.COM_Execute(System.IntPtr,System.Int32)"/>
            <seealso cref="T:PoKeysDevice_DLL.sPoNETDevice"/>
            <seealso cref="T:PoKeysDevice_DLL.ePoNEToperations"/>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetFailsafeSettings(PoKeysDevice_DLL.sPoKeysFailsafeSettings@)">
            <summary>
            Read failsafe settings from device
            </summary>
            <param name="failsafeStruct">Reference to the sPoKeysFailsafeSettings structure</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_GetFailsafeSettings(System.IntPtr)">
            <summary>
            COM alternative for GetFailsafeSettings
            </summary>
            <param name="failSafeStruct">Pointer to a sPoKeysFailsafeSettings structure</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetFailsafeSettings(PoKeysDevice_DLL.sPoKeysFailsafeSettings@)">
            <summary>
            Write failsafe settings to device
            </summary>
            <param name="failsafeStruct">Reference to the sPoKeysFailsafeSettings structure</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.COM_SetFailsafeSettings(System.IntPtr)">
            <summary>
            COM alternative for SetFailsafeSettings
            </summary>
            <param name="failSafeStruct">Pointer to a sPoKeysFailsafeSettings structure</param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetReportsServerSettings(PoKeysDevice_DLL.sPoKeysReportsServerSettings@)">
            <summary>
            Get report server settings for PoKeys device
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetReportsServerSettings(PoKeysDevice_DLL.sPoKeysReportsServerSettings@)">
            <summary>
            Set report server settings for PoKeys device
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.GetCosmSettings(PoKeysDevice_DLL.sPoKeysCosmSettings@)">
            <summary>
            Retreive Cosm service settings for PoKeys device
            </summary>
            <param name="cosm"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.SetCosmSettings(PoKeysDevice_DLL.sPoKeysCosmSettings@)">
            <summary>
            Set Cosm service settings for PoKeys device
            </summary>
            <param name="cosm"></param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.EnumerateDevices">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.EnumerateDevices_Old">
             <summary>
               Enumerates all USB devices connected. This function should be called every time the class is initialized or 
               number of devices on the system has changed.
             </summary>
             <returns>Number of detected USB devices</returns>
             <example>The following example enumerates the devices and lists them in the listbox:
             <code>
                // Enumerate and list USB devices
                int i = MyDevice.EnumerateDevices();
                byte userID = 0;
                lstUSBdevices.Items.Clear();
            
                if (i &gt; 0)
                {
                    lstUSBdevices.Enabled = true;
                    lstUSBdevices.Items.Clear();
                }
                else
                {
                    lstUSBdevices.Enabled = false;
                    lstUSBdevices.Items.Clear();
                    lstUSBdevices.Items.Add("No device detected");
                }
            
                for (int k = 0; k &lt; i; k++)
                {
                    MyDevice.ConnectToDevice(k);
            
                    MyDevice.GetUserID(ref userID);
                    lstUSBdevices.Items.Add(MyDevice.GetDeviceTypeName() + " (" + userID + ")");
            
                    MyDevice.DisconnectDevice();
                }
             </code>
             </example>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.ConnectToDevice(System.Int32)"/>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.StartEthernetDiscovery(System.Int32,System.Boolean)"/>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.DisconnectDevice"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ConnectToDevice(System.Int32)">
             <summary>
               Opens the connection to the selected USB device
             </summary>
             <param name="deviceIndex">Index of the selected device (up to number of USB devices - 1)</param>
             <returns>True if connection was established</returns>
             <example>The following example enumerates the devices and lists them in the listbox:
             <code>
                // Enumerate and list USB devices
                int i = MyDevice.EnumerateDevices();
                byte userID = 0;
                lstUSBdevices.Items.Clear();
            
                if (i &gt; 0)
                {
                    lstUSBdevices.Enabled = true;
                    lstUSBdevices.Items.Clear();
                }
                else
                {
                    lstUSBdevices.Enabled = false;
                    lstUSBdevices.Items.Clear();
                    lstUSBdevices.Items.Add("No device detected");
                }
            
                for (int k = 0; k &lt; i; k++)
                {
                    MyDevice.ConnectToDevice(k);
            
                    MyDevice.GetUserID(ref userID);
                    lstUSBdevices.Items.Add(MyDevice.GetDeviceTypeName() + " (" + userID + ")");
            
                    MyDevice.DisconnectDevice();
                }
             </code>
             </example>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.DisconnectDevice"/>
             <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.EnumerateDevices"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ConnectToDevice(System.Int32,System.Int32)">
            <summary>
            Find the PoKeys device with the specified serial number and open the connection with it
            </summary>
            <param name="SerialNumber">Serial number of the PoKeys device</param>
            <param name="checkEthernet">If 1, PoKeys56E devices will be also included in the search, if 2, and UDP connection will be used for connecting to PoKeys56E </param>
            <returns></returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.ConnectToDevice(System.IntPtr,System.Int32)">
            <summary>
              Opens the connection to the selected USB device
            </summary>
            <param name="deviceIndex">Index of the selected device (up to number of USB devices - 1)</param>
            <param name="formHandle">Handle to the form that contains main user interface</param>
            <returns>True if connection was established</returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.DisconnectDevice">
            <summary>
              Closes the connection to the selected device
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.Connected">
            <summary>
            Checks if connection is still established
            </summary>
            <returns>True if connected</returns>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.ConnectToDevice(System.Int32)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.ConnectToNetworkDevice(System.String)"/>
            <seealso cref="M:PoKeysDevice_DLL.PoKeysDevice.DisconnectDevice"/>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.CloseDeviceHandle">
             <summary>
             Closes the device handle obtained with CreateFile and frees resources.
             </summary>
             
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.GetDeviceHandle(System.String)">
             <summary>
             Requests a handle with CreateFile.
             </summary>
             
             <param name="devicePathName"> Returned by SetupDiGetDeviceInterfaceDetail 
             in an SP_DEVICE_INTERFACE_DETAIL_DATA structure. </param>
             
             <returns>
             The handle.
             </returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.InitializeDevice">
             <summary>
             Initializes a device interface and obtains information about it.
             Calls these winusb API functions:
               WinUsb_Initialize
               WinUsb_QueryInterfaceSettings
               WinUsb_QueryPipe
             </summary>
             
             <param name="deviceHandle"> A handle obtained in a call to winusb_initialize. </param>
             
             <returns>
             True on success, False on failure.
             </returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.IsWindowsXpOrLater">
             <summary>
             Is the current operating system Windows XP or later?
             The WinUSB driver requires Windows XP or later.
             </summary>
            
             <returns>
             True if Windows XP or later, False if not.
             </returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.ReadViaBulkTransfer(System.Byte,System.UInt32,System.Byte[]@,System.UInt32@,System.Boolean@)">
             <summary>
             Attempts to read data from a bulk IN endpoint.
             </summary>
             
             <param name="InterfaceHandle"> Device interface handle. </param>
             <param name="PipeID"> Endpoint address. </param>
             <param name="bytesToRead"> Number of bytes to read. </param>
             <param name="Buffer"> Buffer for storing the bytes read. </param>
             <param name="bytesRead"> Number of bytes read. </param>
             <param name="success"> Success or failure status. </param>
             
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.SendViaBulkTransfer(System.Byte[]@,System.UInt32)">
             <summary>
             Attempts to send data via a bulk OUT endpoint.
             </summary>
             
             <param name="buffer"> Buffer containing the bytes to write. </param>
             <param name="bytesToWrite"> Number of bytes to write. </param>
             
             <returns>
             True on success, False on failure.
             </returns>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.SetPipePolicy(System.Byte,System.UInt32,System.Byte)">
             <summary>
             Sets pipe policy.
             Used when the value parameter is a Byte (all except PIPE_TRANSFER_TIMEOUT).
             </summary>
             
             <param name="pipeId"> Pipe to set a policy for. </param>
             <param name="policyType"> POLICY_TYPE member. </param>
             <param name="value"> Policy value. </param>
             
             <returns>
             True on success, False on failure.
             </returns>
             
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.SetPipePolicy(System.Byte,System.UInt32,System.UInt32)">
             <summary>
             Sets pipe policy.
             Used when the value parameter is a UInt32 (PIPE_TRANSFER_TIMEOUT only).
             </summary>
             
             <param name="pipeId"> Pipe to set a policy for. </param>
             <param name="policyType"> POLICY_TYPE member. </param>
             <param name="value"> Policy value. </param>
             
             <returns>
             True on success, False on failure.
             </returns>
             
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.UsbEndpointDirectionIn(System.Int32)">
             <summary>
             Is the endpoint's direction IN (device to host)?
             </summary>
             
             <param name="addr"> The endpoint address. </param>
             <returns>
             True if IN (device to host), False if OUT (host to device)
             </returns> 
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.WinUsbDevice.UsbEndpointDirectionOut(System.Int32)">
             <summary>
             Is the endpoint's direction OUT (host to device)?
             </summary>
             
             <param name="addr"> The endpoint address. </param>
             
             <returns>
             True if OUT (host to device, False if IN (device to host)
             </returns>
        </member>
        <member name="T:PoKeysDevice_DLL.PoKeysDevice.OEMLoader">
            <summary>
            Device name loader
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDevice.OEMLoader.LoadOEM(PoKeysDevice_DLL.PoKeysDevice.OEMLoader.OEMData@)">
            <summary>
            Load OEM strings
            </summary>
            <param name="OEMDeviceName"></param>
            <param name="OEMDeviceName55"></param>
            <param name="OEMDeviceName56U"></param>
            <param name="OEMDeviceName56E"></param>
            <param name="OEMDeviceName27U"></param>
            <param name="OEMDeviceName27E"></param>
            <returns></returns>
        </member>
        <member name="T:PoKeysDevice_DLL.PoKeysDeviceDEMO">
            <summary>
            DEMO PoKeysDevice object that is used to simulate a PoKeys device in DEMO mode
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDeviceDEMO.EnumerateDevices">
            <summary>
              Enumerates all the devices connected
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDeviceDEMO.ConnectToDevice(System.Int32)">
            <summary>
              Opens the connection to the selected device
            </summary>
            
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDeviceDEMO.ConnectToDevice(System.IntPtr,System.Int32)">
            <summary>
              Opens the connection to the selected device
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDeviceDEMO.DisconnectDevice">
            <summary>
              Closes the connection to the selected device
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDeviceDEMO.GetDeviceID(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Retrieves the device data
            </summary>
        </member>
        <member name="M:PoKeysDevice_DLL.PoKeysDeviceDEMO.GetAnalogValueMax">
            <summary>
            Demo function
            </summary>
            <returns></returns>
        </member>
        <member name="T:PoKeysDevice_DLL.ePoKeysDllHeaderMajorVersion">
            <summary>
            PoKeys communication library major version
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDllHeaderMajorVersion.version">
            <summary>
            version
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePoKeysDllHeaderMinorVersion">
            <summary>
            PoKeys communication library minor version
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDllHeaderMinorVersion.version">
            <summary>
            version
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.eDeviceTypes">
            <summary>
            PoKeys device types
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys55v1">
            <summary>
            PoKeys55 v1
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys55v2">
            <summary>
            PoKeys55 v2
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys55v3">
            <summary>
            PoKeys55 v3
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys55_Recovery">
            <summary>
            Recovery mode (bootloader) for PoKeys55
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys56U">
            <summary>
            PoKeys56U
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys56E">
            <summary>
            PoKeys56E
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys56U_recovery">
            <summary>
            PoKeys56U in recovery mode
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys56E_recovery">
            <summary>
            PoKeys56E in recovery mode
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoTLog27U">
            <summary>
            PoTLog27U
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoTLog27E">
            <summary>
            PoTLog27E
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys57Uv0">
            <summary>
            PoKeys57U
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys57Ev0">
            <summary>
            PoKeys57E
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys57U">
            <summary>
            PoKeys57U
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eDeviceTypes.PoKeys57E">
            <summary>
            PoKeys57E
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePoKeysDeviceConnectionType">
            <summary>
            Connection types enum
            </summary>
            <value></value>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceConnectionType.USBDevice">
            <summary>
            USB device
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceConnectionType.NetworkDevice">
            <summary>
            Network device
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePinCap">
            <summary>
            Pin capabilities enum
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.pinRestricted">
            <summary>
            Pin is restricted to use
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.pinNotAvailable">
            <summary>
            Reserved function pin
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.digitalInput">
            <summary>
            Digital input available
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.digitalOutput">
            <summary>
            Digital output available
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.analogInput">
            <summary>
            Analog input available
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.analogOutput">
            <summary>
            Analog output available
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.triggeredInput">
            <summary>
            Triggered input
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.digitalCounter">
            <summary>
            Digital counter available
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinCap.invertPin">
            <summary>
            Invert pin
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.eModbusAccess">
            <summary>
            Modbus peripherals access enum
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_IO">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_analogIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_PWMOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_MatrixKB">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_I2CMatrixKB">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_I2CMatrixKBLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_LEDMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_PoExtBus">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_Encoders">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_Counters">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_LCD">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_Sensors">
            <summary>
            
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_PoIL">
            <summary>
            Access to PoIL shared data
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eModbusAccess.access_PoILcore">
            <summary>
            Access to PoIL core states
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePinMappingType">
            <summary>
            Digital pin to USB keyboard mapping options
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinMappingType.enableKeyMapping">
            <summary>
            Enable mapping
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinMappingType.directKeyMapping">
            <summary>
            Each key event is directly transfered to the system
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinMappingType.macroKeyMapping">
            <summary>
            PoKeys is emulating the sequence of key presses
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinMappingType.continuousMacroMapping">
            <summary>
            PoKeys is emulating the repeating sequence of key presses
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePinMappingType.repeatedKeyMapping">
            <summary>
            PoKeys emulates typematic delay and repeat rate for the activated key
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePoKeysDLLOperations">
            <summary>
            COM_Execute operations
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetDeviceData">
            <summary>
            Retrieves basic device data
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetPinConfiguration">
            <summary>
            Retrieves pin configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.SetPinConfiguration">
            <summary>
            Sets pin configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetPeripheralConfiguration">
            <summary>
            Retrieves peripheral configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.SetPeripheralConfiguration">
            <summary>
            Sets perihperal configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetDigitalPinValues">
            <summary>
            Reads digital inputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.SetDigitalPinValues">
            <summary>
            Sets digital outputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetAnalogPinValues">
            <summary>
            Reads analog inputs values
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetEncoderValues">
            <summary>
            Reads encoders values
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetDigitalCounterValues">
            <summary>
            Reads digital counter values
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.SetPWMOutputs">
            <summary>
            Set PWM block settings (if period is set to 0, this call returns PWM block frequency)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.SetEncoderValues">
            <summary>
            Sets encoders values
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetMatrixKeyboardConfiguration">
            <summary>
            Retrieves matrix keyboard configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.SetMatrixKeyboardConfiguration">
            <summary>
            Sets matrix keyboard configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.GetMatrixKeyboardKeysStatus">
            <summary>
            Retrieves matrix keyboard current status of the keys
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.SetMatrixLEDconf">
            <summary>
            Sets Matrix LED display configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.SetMatrixLEDstat">
            <summary>
            Sets Matrix LED status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.LCD">
            <summary>
            LCD-related commands
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDLLOperations.poExtBusSet">
            <summary>
            PoExtBus set data
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.eCOM_PEv2_Operations">
            <summary>
            Operation parameter for COM_PEv2_Execute command
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eCOM_PEv2_Operations.GetStatus">
            <summary>
            Get pulse engine status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eCOM_PEv2_Operations.SetupPulseEngine">
            <summary>
            Setup pulse engine
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eCOM_PEv2_Operations.GetAxisParameters">
            <summary>
            Retrieve single axis parameters
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.eCOM_PEv2_Operations.SetAxisParameters">
            <summary>
            Set single axis parameters
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePoNEToperations">
            <summary>
            COM_PoNET operations
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoNEToperations.GetDeviceConfiguration">
            <summary>
            Retrieves PoExtBus Pro device data
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoNEToperations.GetDeviceInputStatus">
            <summary>
            Reads inputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoNEToperations.SetDeviceOutputStatus">
            <summary>
            Sets outputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoNEToperations.SetLEDPWMduty">
            <summary>
            Set LED intensity
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoNEToperations.ReadLightSensor">
            <summary>
            Read light sensor if present
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.ePoKeysDeviceSupport">
            <summary>
            Additional peripheral support enum
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.KeyMapping">
            <summary>
            Support for key mapping options
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.TriggeredKeyMapping">
            <summary>
            Support for triggered key mapping type
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.KeyRepeatDelay">
            <summary>
            Support for pressed key repeating
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.DigitalCounters">
            <summary>
            Support for digital counters
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.JoystickButtonAxisMapping">
            <summary>
            Support for joystick button and axis mapping
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.JoystickAnalogToDigitalMapping">
            <summary>
            Support for joystick analog to digital mapping
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.Encoders">
            <summary>
            Support for encoders
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.FastEncoders">
            <summary>
            Support for fast encoders
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.Macros">
            <summary>
            Support for macros
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.MatrixKeyboard">
            <summary>
            Support for matrix keyboard
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.MatrixKeyboardTriggeredMapping">
            <summary>
            Support for matrix keyboard with triggered mapping
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.PoNETMatrixKeyboard">
            <summary>
            Support for PoNET matrix keyboard
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.PWM">
            <summary>
            Support for PWM outputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.LCD">
            <summary>
            Support for LCD displays
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.MatrixLED">
            <summary>
            Support for matrix LED displays
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.ConnectionSignal">
            <summary>
            Support for connection signal outputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.PoExtBus">
            <summary>
            Support for PoExtBus 
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.PoNET">
            <summary>
            Support for PoNET
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.AnalogInputs">
            <summary>
            Support for analog inputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.AnalogFiltering">
            <summary>
            Support for filtering of analog inputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.InitOutputsStart">
            <summary>
            Support for outputs state initialization on startup
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.protI2C">
            <summary>
            Support for I2C protocol
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.prot1wire">
            <summary>
            Support for 1-wire protocol
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.AdditionalOptions">
            <summary>
            Support for activation of additional options
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.LoadStatus">
            <summary>
            Support for displaying the load status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.CustomDeviceName">
            <summary>
            Support for changing the device's displayed name 
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.PoTLog27support">
            <summary>
            Support for PoTLog27 firmware
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.UltraFastEncoders">
            <summary>
            Ultra fast encoders support available
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.SensorList">
            <summary>
            Sensor list support
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.WebInterface">
            <summary>
            Web interface support
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.FailSafeSettings">
            <summary>
            Failsafe mode support
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.JoystickHATswitch">
            <summary>
            HAT switch on joystick support
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.UniversalReportServer">
            <summary>
            Universal report server
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.ConfigurableDevicePID">
            <summary>
            Device PID is configurable
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.EasySensors">
            <summary>
            Support for EasySensors feature
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.CustomSensorUnits">
            <summary>
            Support for custom sensor units
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.ePoKeysDeviceSupport.WebInterfaceEx">
            <summary>
            Upgraded web interface
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysNetworkDeviceData">
            <summary>
            Structure that holds the data of the selected network device - to be used with COM_GetNetworkDeviceData
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysNetworkDeviceData.IPAddress">
            <summary>
            Device's IP address
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysNetworkDeviceData.HostIP">
            <summary>
            IP address of the computer that started the discovery
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysNetworkDeviceData.DHCPStatus">
            <summary>
            DHCP status of the device - 0 means that the device does not use DHCP
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysNetworkDeviceData.UserID">
            <summary>
            User ID of the device
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysNetworkDeviceData.SerialNumber">
            <summary>
            Serial number of the device
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysPinData">
            <summary>
            Structure that holds all settings for one pin
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.PinFunction">
            <summary>
            Pin function code
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.CounterOptions">
            <summary>
            Pin counter options - bit 0: count rising edges, bit 1: count falling edges
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.DigitalInputValue">
            <summary>
            Digital input pin state
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.DigitalOutputValue">
            <summary>
            Digital output pin state
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.DigitalCounterValue">
            <summary>
            Value of the digital counter
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.DigitalCounterAvailable">
            <summary>
            Flag that shows whether digital counter is available on this pin
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.AnalogValue">
            <summary>
            Analog input pin value
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.PWMduty">
            <summary>
            Deprecated - do not use
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.MappingType">
            <summary>
            Pin to key mapping type
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.KeyCodeMacroID">
            <summary>
            Key code or macro ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.KeyModifier">
            <summary>
            Key modifier
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.downKeyCodeMacroID">
            <summary>
            Down-event key code or macro ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.downKeyModifier">
            <summary>
            Down-event key modifier
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.upKeyCodeMacroID">
            <summary>
            Up-event key code or macro ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPinData.upKeyModifier">
            <summary>
            Up-event key modifier
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysEncoder">
            <summary>
            Structure that holds the configuration of one encoder
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEncoder.encoderOptions">
            <summary>
            Encoder options
            <para>bit 0: enable encoder</para>
            <para>bit 1: 4x sampling</para>
            <para>bit 2: 2x sampling</para>
            <para>bit 3: reserved</para>
            <para>bit 4: direct key mapping for direction A</para>
            <para>bit 5: mapped to macro for direction A</para>
            <para>bit 6: direct key mapping for direction B</para>
            <para>bit 7: mapped to macro for direction B</para>
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEncoder.channelApin">
            <summary>
            Pin index for channel A
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEncoder.channelBpin">
            <summary>
            Pin index for channel B
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEncoder.dirAkeyCode">
            <summary>
            Key code simulated for direction A
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEncoder.dirAkeyModifier">
            <summary>
            Key modifier simulated for direction A
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEncoder.dirBkeyCode">
            <summary>
            Key code simulated for direction B
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEncoder.dirBkeyModifier">
            <summary>
            Key modifier simulated for direction B
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEncoder.encoderValue">
            <summary>
            Encoder value
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysPWM">
            <summary>
            Structure for the PWM outputs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPWM.PWMinternalFrequency">
            <summary>
            Holds the clock frequency for the PWM block
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPWM.PWMperiod">
            <summary>
            PWM period value
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPWM.PWMduty">
            <summary>
            An array of 6 PWM duty values
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysPWM.PWMenabledChannels">
            <summary>
            An array of 6 bytes that hold information whether the PWM channel is enabled or not
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysMatrixLED">
            <summary>
            Matrix LED settings and status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysMatrixLED.displayEnabled">
            <summary>
            Set to 1 to enable matrix LED
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysMatrixLED.rows">
            <summary>
            Number of rows activated
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysMatrixLED.columns">
            <summary>
            Number of columns activated
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysMatrixLED.data">
            <summary>
            8 bytes of Matrix LED status
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysDeviceStatus">
            <summary>
            Device status structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.DeviceData">
            <summary>
            Structure that holds basic device data
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.Pins">
            <summary>
            An array of 55 pins, each with its own settings
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.Encoders">
            <summary>
            An array of 26 encoders, each with its own settings
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.matrixKB">
            <summary>
            Matrix keyboard settings
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.PWMout">
            <summary>
            PWM (pulse-width modulation) block
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.MatrixLED">
            <summary>
            Matrix LED settings and status
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.LCD">
            <summary>
            LCD settings and buffers
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.FastEncodersConfiguration">
            <summary>
            Fast encoders configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.FastEncodersOptions">
            <summary>
            Fast encoders additional options
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.UltraFastEncoderConfiguration">
            <summary>
            Ultra fast encoder configuration
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceStatus.UltraFastEncoderOptions">
            <summary>
            Ultra fast encoder additional options
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysDeviceData">
            <summary>
            Structure that holds info on device
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceData.SerialNumber">
            <summary>
            Serial number
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceData.FirmwareVersionMajor">
            <summary>
            Firmware version - major revision
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceData.FirmwareVersionMinor">
            <summary>
            Firmware version - minor revision
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceData.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceData.DeviceName">
            <summary>
            Device name
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceData.DeviceHWName">
            <summary>
            Type of device (string)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDeviceData.BuildDate">
            <summary>
            Build date
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sMatrixKeyboard">
            <summary>
            Structure used to read or setup the matrix keyboard
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.matrixKBconfiguration">
            <summary>
            Matrix keyboard configuration 
            <para>bit 0: enable matrix keyboard</para>
            <para>bit 1-7: reserved</para>                
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.matrixKBwidth">
            <summary>
            Number of columns - 1
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.matrixKBheight">
            <summary>
            Number of rows - 1
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.matrixKBcolumnsPins">
            <summary>
            Array of 8 bytes, holding the indexes for the pins that are connected to matrix keyboard columns
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.matrixKBrowsPins">
            <summary>
            Array of 16 bytes, holding the indexes for the pins that are connected to matrix keyboard rows
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.macroMappingOptions">
            <summary>
            An array of 128 bytes that hold the options for macro mapping - see the manual for the array structure
            <para>bit 0: Macro mapping enabled</para>
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.keyMappingKeyCode">
            <summary>
            An array of 128 bytes that hold the key codes for each key - see the manual for the array structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.keyMappingKeyModifier">
            <summary>
            An array of 128 bytes that hold the key modifiers for each key - see the manual for the array structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.keyMappingTriggeredKey">
            <summary>
            An array of 128 bytes that hold the triggered key options for each key - see the manual for the array structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.keyMappingKeyCodeUp">
            <summary>
            An array of 128 bytes that hold the up-event key codes for each key - see the manual for the array structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.keyMappingKeyModifierUp">
            <summary>
            An array of 128 bytes that hold the up-event key modifiers for each key - see the manual for the array structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sMatrixKeyboard.matrixKBvalues">
            <summary>
            An array of 128 bytes that hold the current status of each matrix keyboard key - see the manual for the array structure
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoNETDevice">
            <summary>
            PoNET device status structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoNETDevice.moduleI2Caddress">
            <summary>
            Address of the PoNET device
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoNETDevice.moduleType">
            <summary>
            Module type identification
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoNETDevice.moduleOptions">
             <summary>
             Module options
            <para>bit 0 - has inputs</para>
            <para>bit 1 - has outputs</para>
            <para>bit 2 - x-y rotated</para>
            <para>bit 3 - light sensor present</para>
            <para>bit 4 - device mapped to PoKeys peripheral</para>
            <para>bit 5 - configuration retrieved</para>
            <para>bit 6 - device configured</para>
            <para>bit 7 - device present</para>
             </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoNETDevice.moduleSize">
            <summary>
            Module size
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoNETDevice.LEDData">
            <summary>
            An array of 16 bytes that hold the status of LEDs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoNETDevice.keyData">
            <summary>
            An array of 16 bytes that hold the status of the keys
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoNETDevice.PWMdutyCycle">
            <summary>
            PWM duty cycle of the LEDs
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoNETDevice.LightSensorValue">
            <summary>
            Current light sensor value
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysSensor">
            <summary>
            Sensor structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.sensorI2Ctype">
            <summary>
            Type of the I2C sensor
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.sensorI2Caddress">
            <summary>
            I2C address of the sensor
            </summary>        
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.sensor1wire64bitID">
            <summary>
            An array of 8 bytes holding the 64-bit 1-wire sensor ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.sensorRefreshPeriod">
            <summary>
            Refresh period for the sensor in steps of 100ms
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.sensorAnalogChannel">
            <summary>
            Analog channel that the sensor is connected to
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.sensorAnalogGain">
            <summary>
            Gain of the analog sensor - u=AD_val*A_gain/4096+A_offset
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.sensorAnalogOffset">
            <summary>
            Offset of the analog sensor - u=AD_val*A_gain/4096+A_offset
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.sensorValue">
            <summary>
            Current sensor value
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysSensor.failsafeConfiguration">
            <summary>
            Sensor failsafe configuration (default value)
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysEasySensor">
            <summary>
            EasySensor structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEasySensor.sensorType">
            <summary>
            Type of the sensor
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEasySensor.sensorRefreshPeriod">
            <summary>
            Refresh period in 0.1s
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEasySensor.sensorFailsafeConfig">
            <summary>
            Failsafe configuration (bits 0-5: timeout in seconds, bit 6: invalid=0, bit 7: invalid=0x7FFFFFFF)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEasySensor.sensorReadingID">
            <summary>
            Sensor reading selection
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEasySensor.sensorID">
            <summary>
            8 byte sensor ID - see protocol specifications for details
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEasySensor.sensorValue">
            <summary>
            Current sensor value
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysEasySensor.sensorOKstatus">
            <summary>
            Sensor OK status
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysCustomSensorUnit">
            <summary>
            Custom sensor unit descriptor
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysCustomSensorUnit.HTMLcode">
            <summary>
            32 character custom sensor unit HTML code
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysCustomSensorUnit.simpleText">
            <summary>
            8 character custom sensor unit text
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysDashboardItemEx">
            <summary>
            Dashboard item list structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItemEx.AccessRights">
            <summary>
            Access rights for this sensor - bit mapped user access list – see web interface users chapter
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItemEx.Label">
            <summary>
            13 character item caption (label)
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysDashboardItem">
            <summary>
            Dashboard items list structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItem.itemLabel">
            <summary>
            8 character item caption (label)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItem.itemType">
            <summary>
            Dashboard item type
            <para>0: unused (inactive)</para>
            <para>1: digital input (only display type 0)</para>
            <para>2: digital output (only display types 0 and 1)</para>
            <para>3: analog input </para>
            <para>4: PoExtBus output (only display types 0 and 1) - not yet implemented!!</para>
            <para>5: sensor input </para>
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItem.sensorID">
            <summary>
            ID of the sensor, which value is displayed in this item
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItem.displayType">
            <summary>
            <para>0: ON/OFF text value display</para>
            <para>1: ON/OFF text value display and on/off buttons</para>
            <para>10: analog display in V (voltage in 0.01 V, range -327,68 to +327.67 V)</para>
            <para>11: analog display in V with bar graph</para>
            <para>12: analog display in mA</para>
            <para>13: analog display in mA with bar graph</para>
            <para>14: analog display in A</para>
            <para>15: analog display in A with bar graph</para>
            <para>20: temperature display in degrees C  (temperature in 0.01 °C, range −327.68 to +327.67)</para>
            <para>21: temperature display in degrees C with bar graph  (temperature in 0.01 °C, range -100 to 500)</para>
            <para>30: relative humidity display in % (humidity in 0.01 % RH)</para>
            <para>31: relative humidity display in % with bar graph (humidity in 0.01 % RH)</para>
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItem.accessRights">
            <summary>
            Access rights for this sensor - bit mapped user access list – see web interface users chapter
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItem.minValue">
            <summary>
            Minimum value for the bar graph display
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysDashboardItem.maxValue">
            <summary>
            Maximum value for the bar graph display
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysWebInterface">
            <summary>
            Web interface settings
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysWebInterface.allowAnonymousAccess">
            <summary>
            Anonymous access is allowed if this byte is set to 1
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysWebInterface.allowOutputToggling">
            <summary>
            If this byte is set to 1, user is allowed to set the digital outputs via web interface
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysWebInterface.disableWebInterface">
            <summary>
            If this byte is set to 1, web interface is disabled
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysWebuser">
            <summary>
            Web user account settings
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysWebuser.userName">
            <summary>
            8 characters of user name
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysWebuser.password">
            <summary>
            8 characters of user password
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.s1wireSensor">
            <summary>
            1-wire sensor structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.s1wireSensor.sensorID">
            <summary>
            64-bit 1-wire sensor ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.s1wireSensor.sensorValue">
            <summary>
            Sensor value (multiplied by 100)
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoTLogDevice">
            <summary>
            PoTLog27 status structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoTLogDevice.sensors1Wire">
            <summary>
            An array of 27 1-wire sensor structures
            <seealso cref="T:PoKeysDevice_DLL.s1wireSensor"/>
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysLCD">
            <summary>
            PoKeys LCD structure
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.F_GetConfiguration">
            <summary>
            Flag: Read configuration from device
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.F_SetConfiguration">
            <summary>
            Flag: Write configuration to device
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.option">
            <summary>
            LCD option (0 - disabled, 1 - enabled on primary pins, 2 - enabled on secondary pins)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.rows">
            <summary>
            Number of rows (4 for 4x20 LCD)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.cols">
            <summary>
            Number of columns (20 for 4x20 LCD)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.F_UpdateLine1">
            <summary>
            Flag: Update line 1
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.F_UpdateLine2">
            <summary>
            Flag: Update line 2
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.F_UpdateLine3">
            <summary>
            Flag: Update line 3
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.F_UpdateLine4">
            <summary>
            Flag: Update line 4
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.line1">
            <summary>
            LCD Line 1 buffer
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.line2">
            <summary>
            LCD Line 2 buffer
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.line3">
            <summary>
            LCD Line 3 buffer
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysLCD.line4">
            <summary>
            LCD Line 4 buffer
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysOptions">
            <summary>
            Additional options activation
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysOptions.ActivatedOptions">
            <summary>
            Bit-mapped additional options
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysOptions.ActivationKey">
            <summary>
            8 bytes of the activation key that is sent to the device
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysFailsafeSettings">
            <summary>
            Failsafe settings
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysFailsafeSettings.bFailSafeEnabled">
            <summary>
            Failsafe enabled and timeout setting (0 disabled other define timeout period in 100ms steps)
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysFailsafeSettings.bFailSafePeripherals">
            <summary>
            Bit-mapped enabled peripherals
            0 - Digital IO
            1 - PoExtBus
            2 - PWM
            3 - Pulse engine
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysFailsafeSettings.bFailSafeIO">
            <summary>
            Digital outputs values
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysFailsafeSettings.bFailSafePoExtBus">
            <summary>
            PoExtBus outputs values
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysFailsafeSettings.bFailSafePWM">
            <summary>
            PWM outputs values
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysCosmSettings">
            <summary>
            Cosm service settings for PoKeys
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysCosmSettings.bCosmAPIkey">
            <summary>
            Cosm API key
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysCosmSettings.bCosmFeedID">
            <summary>
            Cosm Feed ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysCosmSettings.bCosmServerIP">
            <summary>
            Cosm server ID
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysCosmSettings.bCosmUpdateRate">
            <summary>
            Feed update rate
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysCosmSettings.bCosmLastResult">
            <summary>
            Last result
            0 - invalid or no request
            1 - OK
            101 - Not authorised
            103 - Forbidden
            122 - Unprocessable entity
            200 - Server errror
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.sPoKeysReportsServerSettings">
            <summary>
            Server reports service settings for PoKeys
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysReportsServerSettings.bRequestHeader">
            <summary>
            Request header
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysReportsServerSettings.bServerIP">
            <summary>
            Server IP
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysReportsServerSettings.iPortNumber">
            <summary>
            Server port number
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysReportsServerSettings.iUpdateRate">
            <summary>
            Feed update rate
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysReportsServerSettings.bRequestType">
            <summary>
            Request type
            </summary>
        </member>
        <member name="F:PoKeysDevice_DLL.sPoKeysReportsServerSettings.iLastResult">
            <summary>
            Last result code
            </summary>
        </member>
        <member name="T:PoKeysDevice_DLL.PoKeysUSBDeviceObject">
            <summary>
            PoKeys USB device class used as a device descriptor for enumeration
            </summary>
        </member>
    </members>
</doc>
