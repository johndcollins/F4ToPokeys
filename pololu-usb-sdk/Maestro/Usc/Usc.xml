<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Usc</name>
    </assembly>
    <members>
        <member name="T:Pololu.Usc.ConfigurationFile">
            <summary>
            A static class with methods for reading and writing Maestro
            configuration files.
            </summary>
        </member>
        <member name="M:Pololu.Usc.ConfigurationFile.load(System.IO.StreamReader,System.Collections.Generic.List{System.String})">
            <summary>
            Parses a saved configuration file and returns a UscSettings object.
            </summary>
            <param name="warnings">A list of warnings.  Whenever something goes
            wrong with the file loading, a warning will be added to this list.
            The warnings are not fatal; if the function returns it will return
            a valid UscSettings object.
            </param>
            <param name="sr">The file to read from.</param>
            <remarks>This function is messy.  Maybe I should have tried the XPath
            library.</remarks>
        </member>
        <member name="M:Pololu.Usc.ConfigurationFile.readAttributes(System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            If the XmlReader is at an element that has attributes, this will read all those
            attributes in to the dictionary.
            </summary>
        </member>
        <member name="M:Pololu.Usc.ConfigurationFile.save(Pololu.Usc.UscSettings,System.IO.StreamWriter)">
            <summary>
            Saves a UscSettings object to a textfile.
            </summary>
            <param name="settings">The settings to read from.</param>
            <param name="sw">The file to write to.</param>
        </member>
        <member name="T:Pololu.Usc.uscRequest">
            <summary>
             These are the values to put in to bRequest when making a setup packet
             for a control transfer to the Maestro.  See the comments and code in Usc.cs
             for more information about what these requests do and the format of the
             setup packet.
            </summary>
        </member>
        <member name="T:Pololu.Usc.ServoStatus">
            <summary>
            Represents the current status of a channel.
            </summary>
        </member>
        <member name="F:Pololu.Usc.ServoStatus.position">
            <summary>The position in units of quarter-microseconds.</summary>
        </member>
        <member name="F:Pololu.Usc.ServoStatus.target">
            <summary>The target position in units of quarter-microseconds.</summary>
        </member>
        <member name="F:Pololu.Usc.ServoStatus.speed">
            <summary>The speed limit.  Units depends on your settings.</summary>
        </member>
        <member name="F:Pololu.Usc.ServoStatus.acceleration">
            <summary>The acceleration limit.  Units depend on your settings.</summary>
        </member>
        <member name="T:Pololu.Usc.MaestroVariables">
            <summary>
            Represents the variables that can be read from
            a Micro Maestro or Mini Maestro using REQUEST_GET_VARIABLES,
            excluding channel information, the stack, and the call stack.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MaestroVariables.stackPointer">
            <summary>
            The number of values on the data stack (0-32).  A value of 0 means the stack is empty.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MaestroVariables.callStackPointer">
            <summary>
            The number of return locations on the call stack (0-10).  A value of 0 means the stack is empty.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MaestroVariables.errors">
            <summary>
            The error register.  Each bit stands for a different error (see uscError).
            If the bit is one, then it means that error occurred some time since the last
            GET_ERRORS serial command or CLEAR_ERRORS USB command.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MaestroVariables.programCounter">
            <summary>
            The address (in bytes) of the next bytecode instruction that will be executed.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MaestroVariables.scriptDone">
            <summary>
            0 = script is running.
            1 = script is done.
            2 = script will be done as soon as it executes one more instruction
                (used to implement step-through debugging features)
            </summary>
        </member>
        <member name="F:Pololu.Usc.MaestroVariables.performanceFlags">
            <summary>
            The performance flag register.  Each bit represents a different flag.
            If it is 1, then it means that the flag occurred some time since the last
            getVariables request.  This register is always 0 for the Micro Maestro
            because performance flags only apply to the Mini Maestros.
            </summary>
        </member>
        <member name="T:Pololu.Usc.MicroMaestroVariables">
            <summary>
            Represents the non-channel-specific variables that can be read from
            a Micro Maestro using REQUEST_GET_VARIABLES.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.stackPointer">
            <summary>
            The number of values on the data stack (0-32).  A value of 0 means the stack is empty.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.callStackPointer">
            <summary>
            The number of return locations on the call stack (0-10).  A value of 0 means the stack is empty.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.errors">
            <summary>
            The error register.  Each bit stands for a different error (see uscError).
            If the bit is one, then it means that error occurred some time since the last
            GET_ERRORS serial command or CLEAR_ERRORS USB command.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.programCounter">
            <summary>
            The address (in bytes) of the next bytecode instruction that will be executed.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.buffer">
            <summary>Meaningless bytes to protect the program from stack underflows.</summary>
            <remarks>This is public to avoid mono warning CS0169.</remarks>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.stack">
            <summary>
            The data stack used by the script.  The values in locations 0 through stackPointer-1
            are on the stack.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.callStack">
            <summary>
            The call stack used by the script.  The addresses in locations 0 through
            callStackPointer-1 are on the call stack.  The next return will make the
            program counter go to callStack[callStackPointer-1].
            </summary>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.scriptDone">
            <summary>
            0 = script is running.
            1 = script is done.
            2 = script will be done as soon as it executes one more instruction
                (used to implement step-through debugging features)
            </summary>
        </member>
        <member name="F:Pololu.Usc.MicroMaestroVariables.buffer2">
            <summary>Meaningless byte to protect the program from call stack overflows.</summary>
            <remarks>This is public to avoid mono warning CS0169.</remarks>
        </member>
        <member name="T:Pololu.Usc.MiniMaestroVariables">
            <summary>
            Represents the variables that can be read from a Mini Maestro using REQUEST_GET_VARIABLES.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MiniMaestroVariables.stackPointer">
            <summary>
            The number of values on the data stack (0-32).  A value of 0 means the stack is empty.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MiniMaestroVariables.callStackPointer">
            <summary>
            The number of return locations on the call stack (0-10).  A value of 0 means the stack is empty.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MiniMaestroVariables.errors">
            <summary>
            The error register.  Each bit stands for a different error (see uscError).
            If the bit is one, then it means that error occurred some time since the last
            GET_ERRORS serial command or CLEAR_ERRORS USB command.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MiniMaestroVariables.programCounter">
            <summary>
            The address (in bytes) of the next bytecode instruction that will be executed.
            </summary>
        </member>
        <member name="F:Pololu.Usc.MiniMaestroVariables.scriptDone">
            <summary>
            0 = script is running.
            1 = script is done.
            2 = script will be done as soon as it executes one more instruction
                (used to implement step-through debugging features)
            </summary>
        </member>
        <member name="F:Pololu.Usc.MiniMaestroVariables.performanceFlags">
            <summary>
            The performance flag register.  Each bit represents a different error.
            If it is 1, then it means that the error occurred some time since the last
            getVariables request.
            </summary>
        </member>
        <member name="T:Pololu.Usc.uscParameter">
            <summary>
            The different parameters that can be read or written with REQUEST_GET_PARAMETER
            and REQUEST_SET_PARAMETER.  These values should only be used by the Usc class.
            </summary>
        </member>
        <member name="T:Pololu.Usc.uscSerialMode">
            <summary>
            The different serial modes the Maestro can be in.  The serial mode
            determines how the Command Port, TTL Port, the TTL-level UART, and the
            command processor are connected.
            </summary>
        </member>
        <member name="F:Pololu.Usc.uscSerialMode.SERIAL_MODE_USB_DUAL_PORT">
            <summary>On the Command Port, user can send commands and receive responses.
            TTL port/UART are connected to make a USB-to-serial adapter.</summary> 
        </member>
        <member name="F:Pololu.Usc.uscSerialMode.SERIAL_MODE_USB_CHAINED">
            <summary>On the Command Port, user can send commands to Maestro and
             simultaneously transmit bytes on the UART TX line, and user
             can receive bytes from the Maestro and the UART RX line.
             TTL port does not do anything.</summary>
        </member>
        <member name="F:Pololu.Usc.uscSerialMode.SERIAL_MODE_UART_DETECT_BAUD_RATE">
            <summary>
            On the UART, user can send commands and receive reponses after
            sending a 0xAA byte to indicate the baud rate.
            Command Port receives bytes from the RX line.
            TTL Port does not do anything.
            </summary>
        </member>
        <member name="F:Pololu.Usc.uscSerialMode.SERIAL_MODE_UART_FIXED_BAUD_RATE">
            <summary>
            On the UART, user can send commands and receive reponses
            at a predetermined, fixed baud rate.
            Command Port receives bytes from the RX line.
            TTL Port does not do anything.
            </summary>
        </member>
        <member name="T:Pololu.Usc.uscError">
            <summary>
            The correspondence between errors and bits in the two-byte error register.
            For more details about what the errors mean, see the user's guide. 
            </summary>
        </member>
        <member name="T:Pololu.Usc.IUscSettingsHolder">
            <summary>
            An interface to be used by anything that can store usc parameter values.
            This includes MainWindow and Usc itself.
            </summary>
            <remarks>
            When implementing setUscSettings and getUscSettings in your class, look
            at a saved configuration file to make sure you have handled every setting.
            </remarks>
        </member>
        <member name="T:Pololu.Usc.Usc">
            <summary>
            This class represents a Maestro that is connected to the computer.
            </summary>
            <remarks>
            Future improvements to this class might allow it to represent
            an abstract Maestro and attempt to re-connect whenever the connection is
            lost.
            </remarks>
        </member>
        <member name="F:Pololu.Usc.Usc.vendorID">
            <summary>Pololu's USB vendor id.</summary>
            <value>0x1FFB</value>
        </member>
        <member name="F:Pololu.Usc.Usc.englishName">
            <value>
            Maestro USB servo controller
            </value>
            <remarks>
            Warning: EnglishName is used to choose the registry key.  So this should
            never be changed unless you change the code that selects the registry key.
            </remarks>
        </member>
        <member name="F:Pololu.Usc.Usc.INSTRUCTION_FREQUENCY">
            <summary>
            Instructions are executed at 12 MHZ
            </summary>
        </member>
        <member name="F:Pololu.Usc.Usc.servoParameterBytes">
            <summary>The number of parameter bytes per servo.</summary>
        </member>
        <member name="F:Pololu.Usc.Usc.deviceInterfaceGuid">
            <summary>
            The device interface GUID used to detect the native USB interface
            of the Maestro Servo Controllers in windows.
            </summary>
            <remarks>From maestro.inf.</remarks>
        </member>
        <member name="F:Pololu.Usc.Usc.productIDArray">
            <summary>The Micro Maestro's product ID.</summary>
            <value>0x0089</value>
        </member>
        <member name="M:Pololu.Usc.Usc.periodToMicroseconds(System.UInt16,System.Byte)">
            <summary>
            The approximate number of microseconds represented by the servo
            period when PARAMETER_SERVO_PERIOD is set to this value.
            </summary>
        </member>
        <member name="M:Pololu.Usc.Usc.microsecondsToPeriod(System.Decimal,System.Byte)">
            <summary>
            The closest value of PARAMETER_SERVO_PERIOD for a given number of us per period.
            </summary>
            <returns>Amount of time allocated to each servo, in units of 256/12.</returns>
        </member>
        <member name="M:Pololu.Usc.Usc.convertSpbrgToBps(System.UInt16)">
            <summary>
            See Sec 16.3 of the PIC18F14K50 datasheet for information about SPBRG.
            On the umc01a, we have SYNC=0, BRG16=1, and BRGH=1, so the pure math
            formula for the baud rate is Baud = INSTRUCTION_FREQUENCY / (spbrg+1);
            </summary>
        </member>
        <member name="M:Pololu.Usc.Usc.convertBpsToSpbrg(System.UInt32)">
            <summary>
            The converts from bps to SPBRG, so it is the opposite of convertSpbrgToBps.
            The purse math formula is spbrg = INSTRUCTION_FREQUENCY/Baud - 1.
            </summary>
        </member>
        <member name="M:Pololu.Usc.Usc.channelToPort(System.Byte)">
            <summary>
            Converts channel number (0-5) to port mask bit number
            on the Micro Maestro.  Not useful on other Maestros.
            </summary>
        </member>
        <member name="F:Pololu.Usc.Usc.servoCount">
            <summary>
            The number of servos on the device.  This will be 6, 12, 18, or 24.
            </summary>
        </member>
        <member name="M:Pololu.Usc.Usc.specifyServo(Pololu.Usc.uscParameter,System.Byte)">
            <summary>
            Returns the parameter number for the parameter of a given servo,
            given the corresponding parameter number for servo 0.
            </summary>
            <param name="p">e.g. PARAMETER_SERVO0_HOME</param>
            <param name="servo">Channel number.</param>
        </member>
        <member name="M:Pololu.Usc.Usc.eraseScript">
            <summary>
            Erases the entire script and subroutine address table from the devices.
            </summary>
        </member>
        <member name="M:Pololu.Usc.Usc.restartScriptAtSubroutine(System.Byte)">
            <summary>
            Stops and resets the script, sets the program counter to the beginning of the
            specified subroutine.  After this function has run, the script will be paused,
            so you must use setScriptDone() to start it.
            </summary>
            <param name="subroutine"></param>
        </member>
        <member name="M:Pololu.Usc.Usc.setSubroutines(System.Collections.Generic.Dictionary{System.String,System.UInt16},System.Collections.Generic.Dictionary{System.String,System.Byte})">
            <remarks>
            Prior to 2011-7-20, this function had a bug in it that made
            subroutines 64-123 not work!
            </remarks>
        </member>
        <member name="M:Pololu.Usc.Usc.getVariables(Pololu.Usc.MaestroVariables@,System.Int16[]@,System.UInt16[]@,Pololu.Usc.ServoStatus[]@)">
            <summary>
            Gets the complete set of status information for the Maestro.
            </summary>
            <remarks>If you are using a Mini Maestro and do not need all of
            the data provided by this function, you can save some CPU time
            by using the overloads with fewer arguments.</remarks>
        </member>
        <member name="M:Pololu.Usc.Usc.getVariables(Pololu.Usc.MaestroVariables@)">
            <summary>
            Gets a MaestroVariables struct representing the current status
            of the device.
            </summary>
            <remarks>If you are using the Micro Maestro and calling
            getVariables more than once in quick succession,
            then you can save some CPU time by just using the
            overload that has 4 arguments.
            </remarks>
        </member>
        <member name="M:Pololu.Usc.Usc.getVariables(Pololu.Usc.ServoStatus[]@)">
            <summary>
            Gets an array of ServoStatus structs representing
            the current status of all the channels.
            </summary>
            <remarks>If you are using the Micro Maestro and calling
            getVariables more than once in quick succession,
            then you can save some CPU time by just using the
            overload that has 4 arguments.
            </remarks>
        </member>
        <member name="M:Pololu.Usc.Usc.getVariables(System.Int16[]@)">
            <summary>
            Gets an array of shorts[] representing the current stack.
            The maximum size of the array is stackSize.
            </summary>
            <remarks>If you are using the Micro Maestro and calling
            getVariables more than once in quick succession,
            then you can save some CPU time by just using the
            overload that has 4 arguments.
            </remarks>
        </member>
        <member name="M:Pololu.Usc.Usc.getVariables(System.UInt16[]@)">
            <summary>
            Gets an array of ushorts[] representing the current stack.
            The maximum size of the array is callStackSize.
            </summary>
            <remarks>If you are using the Micro Maestro and calling
            getVariables more than once in quick succession,
            then you can save some CPU time by just using the
            overload that has 4 arguments.
            </remarks>
        </member>
        <member name="M:Pololu.Usc.Usc.openRegistryKey">
            <summary>
            Tries to open the registry key that holds the information for this device.
            If the key does not exist, creates it.  Returns the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pololu.Usc.Usc.setRawParameterNoChecks(System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Sets the parameter without checking the range or bytes
            </summary>
            <param name="parameter"></param>
            <param name="value"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:Pololu.Usc.Usc.getUscSettings">
            <summary>
            Gets a settings object, pulling some info from the registry and some from the device.
            If there is an inconsistency, a special flag is set.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pololu.Usc.Usc.bootloaderDeviceInstanceIdPrefixes">
            <summary>
            An array of strings needed to detect which bootloaders are connected.
            when doing firmware upgrades.
            </summary>
        </member>
        <member name="P:Pololu.Usc.Usc.shortProductName">
            <summary>
            Maestro
            </summary>
        </member>
        <member name="T:Pololu.Usc.UscSettings">
            <summary>
            This class represents all the settings for a Maestro.
            This includes every parameter that is stored on the device, as well
            as servo names, sequences, and the compiled script (BytecodeProgram).
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.servosAvailable">
            <summary>
            The number of servo ports available (0-5).  This, along with the
            servoPeriod, determine the "maximum maximum pulse width".
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.servoPeriod">
            <summary>
            This setting only applies to the Micro Maestro.
            For the Mini Maestro, see miniMaestroServoPeriod.
            
            The total time allotted to each servo channel, in units of
            256/12 = 21.33333 us.  The unit for this one are unusual, because
            that is the way it is stored on the device and its unit is not
            a multiple of 4, so we would have inevitable rounding errors if we
            tried to represent it in quarter-microseconds.
            
            Default is 156, so with 6 servos available you get ~20ms between
            pulses on a given channel.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.miniMaestroServoPeriod">
            <summary>
            This setting only applies to the Mini Maestro.
            For the Micro Maestro, see microMaestroServoPeriod.
            
            The length of the time period in which the Mini Maestro sends pulses
            to all the enabled servos, in units of quarter microseconds.
            
            Valid values for this parameter are 0 to 16,777,215.  But 
            
            Default is 80000, so each servo receives a pulse every 20 ms (50 Hz).
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.servoMultiplier">
            <summary>
            This setting only applied to the Mini Maestro.
            The non-multiplied servos have a period specified by miniMaestroServoPeriod.
            The multiplied servos have a period specified by miniMaestroServoPeriod*servoMultiplier.
            
            Valid values for this parameter are 1 to 256.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.serialMode">
            <summary>
            Determines how serial bytes flow between the two USB COM ports, the TTL port,
            and the Maestro's serial command processor.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.fixedBaudRate">
            <summary>
            The fixed baud rate, in units of bits per second.  This gets stored in a
            different format on the usc.cs, so there will be rounding errors
            which get bigger at higher baud rates, but they will be less than
            1% for baud rates of 120000 or less.
            
            This parameter only applies if serial mode is USB UART Fixed Baud.
            
            All values above 184 are valid, but values significantly higher than
            250000 are subject to high rounding errors and the usc firmware might not
            be able to keep up with those higher data rates.  If the baud rate is too
            high and the firmware can't keep up, the Maestro will indicate this to you
            by generating a serial overrun or buffer full error.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.enableCrc">
            <summary>
            If true, then you must send a 7-bit CRC byte at the end of every serial
            command (except the Mini SSC II command).
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.neverSuspend">
            <summary>
            If true, then the Maestro will never go to sleep.  This lets you power 
            the processer off of USB even when the computer has gone to sleep and put
            all of its USB devices in the suspend state.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.serialDeviceNumber">
            <summary>
            The serial device number used to identify this device in Pololu protocol
            commands.  Valid values are 0-127, default is 12.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.miniSscOffset">
            <summary>
            The offset used to determine which Mini SSC commands this device will
            respond to.  The second byte of the Mini SSC command contains the servo
            number; the correspondence between servo number and maestro number (0-5)
            is servo# = miniSSCoffset + channel#.  Valid values are 0-254.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.serialTimeout">
            <summary>
            The time it takes for a serial timeout error to occur, in units of 10 ms.
            A value of 0 means no timeout error will occur.  All values 0-65535 are valid.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.scriptDone">
            <summary>
            True if the script should not be started when the device starts up.
            False if the script should be started.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.channelSettings">
            <summary>
            A list of the configurable parameters for each channel, including
            name, type, home type, home position, range, neutral, min, max.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.enablePullups">
            <summary>
            If true, this setting enables pullups for each channel 18-20 which
            is configured as an input.  This makes the input value be high by
            default, allowing the user to connect a button or switch without
            supplying their own pull-up resistor.  Thi setting only applies to
            the Mini Maestro 24-Channel Servo Controller.
            </summary>
        </member>
        <member name="F:Pololu.Usc.UscSettings.scriptInconsistent">
            <summary>
            true if when loading the script, the checksum did not match or there was an error in compilation, so that it had to be reset to an empty script
            </summary>
        </member>
        <member name="P:Pololu.Usc.UscSettings.servoCount">
            <summary>
            The number of servos on the device.
            </summary>
        </member>
        <member name="T:Pololu.Usc.ChannelSetting">
            <summary>
            An object that represents the settings for one servo,
            e.g. the information in the Settings tab.  One of these objects
            corresponds to one ServoSettingsControl.
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.name">
            <summary>
            Name.  The Usc class stores this in the registry, not the device.
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.mode">
            <summary>
            Type (servo, output, input).
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.homeMode">
            <summary>
            HomeType (off, ignore, goto).
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.home">
            <summary>
            Home position: the place to go on startup.
            If type==servo, units are 0.25 us (qus).
            If type==output, the threshold between high and low is 1500.
            
            This value is only saved on the device if homeType == Goto.
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.minimum">
            <summary>
            Minimum (units of 0.25 us, but stored on the device in units of 16 us).
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.maximum">
            <summary>
            Maximum (units of 0.25 us, but stored on the device in units of 16 us).
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.neutral">
            <summary>
            Neutral: the center of the 8-bit set target command (value at 127).
            If type==servo, units are 0.25 us (qus).
            If type==output, the threshold between high and low is 1500.
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.range">
            <summary>
            Range: the +/- extent of the 8-bit command.
              8-bit(254) = neutral + range,
              8-bit(0) = neutral - range
            If type==servo units are 0.25 us (qus) (but stored on device in
            units of 127*0.25us = 31.75 us.
            Range = 0-127*255 = 0-32385 qus.
            Increment = 127 qus
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.speed">
            <summary>
            Speed: the maximum change in position (qus) per update.  0 means no limit.
            Units depend on your settings.
            Stored on device in this format: [0-31]*2^[0-7]
            Range = 0-31*2^7 = 0-3968.
            Increment = 1.
            
            Note that the *current speed* is stored on the device in units
            of qus, and so it is not subject to the restrictions above!
            It can be any value 0-65535.
            </summary>
        </member>
        <member name="F:Pololu.Usc.ChannelSetting.acceleration">
            <summary>
            Acceleration: the max change in speed every 80 ms.  0 means no limit.
            Units depend on your settings.
            Range = 0-255.
            Increment = 1.
            </summary>
        </member>
    </members>
</doc>
